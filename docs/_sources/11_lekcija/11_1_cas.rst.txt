Гранање
#######


Наредбе гранања
---------------

У животу често неке ствари радимо само ако је неки услов испуњен. На
пример, ако пада киша, тада ћемо понети кишобран. Ако је наша висина
већа од 140 cm, тада ће нас пустити да се спуштамо низ водени тобоган
у аква-парку. И у програмирању се одређене наредбе извршавају само ако је
неки услов испуњен. Да би се описало условно извршавање неких наредби,
користи се наредба ``if``, коју смо већ сретали у програмима са Карелом
и корњачом и која у језику Python има следећи облик:

.. activecode:: if_синтакса

   if uslov:           # ако је услов испуњен:
       naredba_1       #     изврши наредбу 1
       ...             #     ...
       naredba_k       #     изврши наредбу k

Реч `if` на енглеском језику значи `ако`.
      
Подсетимо се да се након услова обавезно мора навести двотачка
(карактер ``:``) и да се наредбе које се извршавају условно морају
мало увући (обично се то уради тако што се испред сваке наредбе
откуцају три размака).
      
Често се јавља и потреба да се у зависности од тога да ли је услов
испуњен изврши једна или друга група наредби. На пример, ако је
корисник унео исправну лозинку треба му пожелети добродошлицу на сајт,
а у супротном му треба јавити да унета лозинка није исправна. Такав
облик организације извршавања програма се постиже наредбом ``if-else``
који у језику Python има следећи облик:

.. activecode:: if_else_синтакса

   if uslov:        # ако је услов испуњен: 
       naredba_1    #   изврши наредбу 1
       ...          #   ...
       naredba_m    #   изврши наребу m
   else:            # у супротном: 
       naredba_1    #   изврши наредбу 1
       ...          #   ...
       naredba_n    #   изврши наредбу n

Реч `else` на енглеском језику значи `у супротном`.
      
Приметимо да је двотачку потребно навести и иза ``else``, као и да су
оба блока наредби увучена.

Наредбом ``if-else`` ток програма се раздваја на две могућности (могу
се извршити наредбе испод ``if`` или испод ``else``), па се каже да се
ток програма на том месту **грана**, а наредба ``if-else`` назива се
наредба гранања.

Поређење (релацијски оператори)
-------------------------------
      
Најједноставнији облик услова је поређење неких величина. Рачунар уме
да пореди величине (бројеве, али и ниске). За то се користе оператори
слични онима које сте већ видели у математици:

- ``a < b`` проверава да ли је ``a`` мање од ``b``
- ``a > b`` проверава да ли је ``a`` веће од ``b``
- ``a >= b`` проверава да ли је ``a`` веће или једнако ``b``
- ``a <= b`` проверава да ли је ``a`` мање или једнако ``b``
- ``a == b`` проверава да ли је ``a`` једнако ``b``
- ``a != b`` проверава да ли је ``a`` различито од ``b``

Резултат примене ових операција је *тачно* или *нетачно* (кажемо да је
резултат логичка тј. истинитосна вредност).
  
Илуструјмо сада примену гранања и поређења кроз неколико једноставних
програма.

Млади програмери
''''''''''''''''
.. level:: 1

.. questionnote::
   
   Напишимо програм који корисницима млађим од 15 година шаље посебну
   похвалу јер су кренули да програмирају веома рано.

.. activecode:: млади_програмери
		
   godine = int(input("Koliko imate godina: "))
   if godine < 15:
       print("Tako ste mladi, a već programirate! Svaka čast!")

      
.. questionnote::

   Покушај сада да измениш претходни програм тако што ћеш онима који
   имају 15 или више године рећи да никада није касно да крену са
   учењем програмирања.
      
.. activecode:: старији_програмери

   godine = int(input("Koliko imate godina: "))
   if True:   # popravi ovaj uslov
       print("Nikada nije kasno da se krene sa učenjem programiranja!")

Тобоган
'''''''
.. level:: 1

.. questionnote::

   Напиши програм који на основу висине детета одређује да ли дете сме
   да иде на тобоган.

Наредни програм садржи пар грешкица. Исправи их.

.. activecode:: тобоган

   visina = int(input("Unesi svoju visinu: "))
   if visina >= 140
   print("Možeš na tobogan")

И наредни програм садржи пар грешака. Пробај да их исрпавиш.

.. activecode:: тобоган_1

   visina = int(input("Unesi svoju visinu: "))
   if visina >= 140:
   print("Možeš na tobogan")
   else
       print("Još ne možeš na tobogan")
   print("Moraš još malo da porasteš")
      
Цвилидрета
''''''''''
.. level:: 1
   
Поређење се може вршити и над нискама. На пример, могуће је проверити
да ли је унета ниска једнака некој траженој. Погледајмо наредни
задатак.
      
.. questionnote::

   У бајци браће Грим, патуљак се звао Цвилидрета и девојка је требало
   да погоди његово име. Ако принцеза промаши, потребно је исписати
   јој поруку да, нажалост, није погодила.

.. activecode:: цвилидрета
		
   ime = input("Kako se zove patuljak: ")
   if True:   # ispravi ovaj uslov
       print("Nažalost nisi pogodila :(")

Ред речи у речнику
''''''''''''''''''
.. level:: 3
      
Ниске се могу поредити и по абецедном или азбучном реду, како су ваша
имена сложена у школском дневнику или како су речи сложене у речнику.
Такво поређење се назива *лексикографско*. За то се користе исти
оператори који се користе и за бројеве. На пример, важи да је ``"Ana"
< "Biljana"`` јер је слово ``A`` испред слова ``B`` у абецеди. Слично,
важи да је ``"Ana" > "Aleksandar"``, јер су им прва слова једнака,
па се онда прелази на гледање другог слова, а на том месту се десило
да је слово ``n`` у абецеди иза слова ``l``.  На крају, важи и да је
``"Ana" < "Anastasija"``, јер када се не наиђе на различито слово, тада
се краћа реч ставља пре друге. Напоменимо да овакво поређење савршено
ради за слова енглеског алфабета, али да су за слова наше латинице или
ћирилице понекад потребна нека додатна подешавања. Обрати пажњу и на
то да се приликом поређења прави разлика између великих и малих слова
(сва велика слова иду пре свих малих слова).

        .. mchoice:: лексикграфско_поређење
         :multiple_answers:
         :answer_a: "motor" < "musaka"
         :answer_b: "mozak" > "motor"
         :answer_c: "riba" >= "ribizla"
         :answer_d: "foto" <= "fotografija"
         :correct: a,b,d
         :feedback_a: "Када је прво слово једнако, разматра се друго"
         :feedback_b: "Када су прва два слова једнака, разматра се треће"
         :feedback_c: "Ако је је прво различито слово у првој речи мање (у абецеди иде испре) од онога у другој речи, прва реч је мања"
         :feedback_d: "Ако нема различитих слова, онда је краћа реч увек мања од дуже"

	  Означи изразе који имају вредност ``True`` тј. тачно.

Пошто се ниске могу поредити, на њих се могу примењивати и функције
попут ``min`` (она одређује мању од две речи) и ``max`` (она одређује
већу од две речи).

Ко иде пре у дневнику
'''''''''''''''''''''
.. level:: 3

.. questionnote::

   Напиши програм који за унета два презимена ђака одређује ко од њих
   иде пре, а ко иде после у дневнику.

Наредна два програма представљају различита решења овог задатка, али и
један и други садрже грешке које треба да исправиш.

.. activecode:: лексикографски1
		
   ucenik1 = input("Unesi prezime prvog ucenika (koristi samo engleske karaktere):")
   ucenik2 = input("Unesi prezime drugog ucenika (koristi samo engleske karaktere):")
   if ucenik1 < ucenik2:
       print(ucenik1, "ide pre", ucenik2)
   else:
       print(ucenik1, "ide pre", ucenik2)

.. activecode:: лексикографски2
		
   ucenik1 = input("Unesi prezime prvog ucenika (koristi samo engleske karaktere):")
   ucenik2 = input("Unesi prezime drugog ucenika (koristi samo engleske karaktere):")
   print(min(ucenik1, ucenik2), "ide pre", min(ucenik1, ucenik2))
      
   

Парност броја
'''''''''''''
.. level:: 1
   
.. questionnote::

   Напиши програм који испитује да ли је унети број паран или непаран.

Проверу да ли је један број дељив другим можемо извршити тако што
израчунамо остатак при дељењу и упоредимо га са нулом. Подсетимо се, о
целобројном дељењу је већ било речи у глави о дељењу и тада смо рекли
да се остатак може израчунати коришћењем оператора ``%``.
   
.. activecode:: паран_непаран

   broj = 17
   if broj % 2 == 0:
       print("Broj je paran")
   else:
       print("Broj je neparan")

Логичке вредности
-----------------

Променљива може да садржи и истинитосне вредности (кажемо и логичке
вредности или исказне вредности) тачно тј. ``True`` и нетачно
тј. ``False`` (обрати пажњу на велико почетно слово). Променљиве чије
су вредности истинитосне се кажу да су логичке или буловске (тј. да су
типа ``bool`` - у част великог математичара Џорџа Була који је први
увео математички рачун над истинитосним вредностима).

.. activecode:: киша

   pada_kisa = True
   if pada_kisa:
       print("Ponesi kišobran")
   else:
       print("Ne moraš da nosiš kišobran")

Ако у претходном програму у првом реду уместо вредности ``True``
поставиш вредност ``False``, добићеш другачију поруку након покретања
програма.

Истинитосна вредност може бити додељена и као резултат неког поређења
(релације). На пример:

.. activecode:: позитиван

   x = int(input("Unesi broj:"))
   pozitivan = x > 0     # tačno ako je x > 0, tj. netačno, u suprotnom
   if pozitivan:
       print("Uneti broj je pozitivan")

Дужи начин да се променљивој додели истинитосна вредност је да се
употреби гранање и константе ``True`` и ``False``.

.. activecode:: позитиван1

   x = int(input("Unesi broj:"))
   
   if x > 0:
       pozitivan = True
   else:
       pozitivan = False
      
   if pozitivan:
       print("Uneti broj je pozitivan")

Наравно, када год можемо користићемо краћи и једноставнији начин.  Још
једно место где ћемо често користити истинитосне вредности су функције
које нешто испитују и враћају тачно или нетачно. На пример, можемо
дефинисати функцију која проверава да ли је број позитиван.

.. activecode:: позитиван_функција

   def pozitivan(x):
       return x > 0
       
   x = int(input("Unesi broj:"))
   if pozitivan(x):
       print("Uneti broj je pozitivan")

Дужи начин да се ова функција дефинише је уз употребу гранања.

.. activecode:: позитиван_функција_1

   def pozitivan(x):
       if x > 0:
           return True
       else:
           return False
       
   x = int(input("Unesi broj:"))
   if pozitivan(x):
       print("Uneti broj je pozitivan")      
      
Комбиновање више логичких услова (логички оператори)
----------------------------------------------------

Једноставнији услови се могу комбиновати. На пример, учитељица жели да
поклони књигу свим оним ученицима који нису правили проблеме у владању
током године и који су били одлични ђаци или су учествовали у
украшавању учионице. Једноставније услове комбинујемо обично речима
**и**, **или** и **не**. Приметимо да је претходна реченица облика *не
услов1 и (услов2 или услов3)*, где је *услов1* услов да је ученик
правио проблеме, *услов2* да је био одличан ђак, а *услов3* да је
учествовао у украшавању учионице.

- Да би услов облика *услов1 и услов2* био испуњен морају бити
  испуњена оба услова *услов1* и *услов2*. На пример, да би реченица
  *грмило је и севало* била тачна, потребно је да је грмило и да је
  севало. Приметимо да реч *и* на неки начин одговара пресеку скупова
  о којем сте сигурно пуно учили из математике. Реч *и* се у језику
  Python записује помоћу речи ``and``.
- Да би услов облика *услов1 или услов2* био испуњен довољно је да је
  један од услова *услов1* и *услов2* буде испуњен. На пример,
  реченица "ићи ћу за викенд у позориште или у биоскоп" је тачна ако
  одеш само у позориште, само у биоскоп, али и ако одеш и у позориште
  и у биоскоп (постоји посебан облик "или-или" који забрањује да су
  оба услова испуњена, али њега нећемо детаљније разматрати). Реч
  *или* се у језику Python записује помоћу речи ``or``.
- Да би услов облика *не услов* био испуњен услов *услов* не сме бити
  испуњен. На пример, реченица "Данас не пада киша" је тачна само ако
  реченица "Данас пада киша" није тачна. Реч *не* се у језику Python
  записује помоћу речи ``not``.

Веома често је потребно проверити да ли се број налази у неком
интервалу (на пример, време је најпријатније ако је температура између
20 и 25 степени, тј. ако припада интервалу :math:`[20, 25]`). То се
ради тако што се провери да је вредност већа од доње границе интервала
и да је мања од горње границе интервала. 

.. infonote::

   Често је нејасно да ли се границе интервала припадају интервалу или
   не.  На пример, када кажемо између 20 и 25 степени, није јасно да
   ли ту подразумевамо и 20 и 25 степени, или не. Да би се разјаснило
   да ли крај припада интервалу користе се различите врсте
   заграда. Мале заграде (заграде ()) означавају отворене интервале
   којима крајеви не припадају, док средње заграде (заграде [])
   означавају завтворене интервале који садрже и своје крајеве.  На
   пример, интервал :math:`[20, 25]` садржи и вредности 20 и 25,
   интервал :math:`(20, 25)` их не садржи, док интервал :math:`[20,
   25)` садржи вредност 20, али не и 25. Са оваквим полуотвореним
   интервалима смо се већ срели код индексирања ниски и листа
   (подсетимо се, ``str[a:b]`` издваја све карактере из ниске са
   позиција из интервала :math:`[a, b)`, тј. карактере који почињу на
   позицији ``a``, а завршавају се на позицији стриктно испред ``b``).

Индекс телесне масе
'''''''''''''''''''
.. level:: 1
   
.. questionnote::

   Индекс телесне масе човека (енгл. body mass index, bmi) се дефинише
   као количник његове масе у килограмима и квадрата његове висине у
   метрима. Нормалним се сматра индекс телесне масе из (затвореног)
   интервала од :math:`18,5\frac{kg}{m^2}` до 25
   :math:`25\frac{kg}{m^2}`. Да ли човек који је висок 180 центиметара
   и тежак 79 килограма нормалне дебљине?

.. activecode:: bmi
		
   masa = 79
   visina = 180 / 100
   bmi = masa / (visina * visina)
   if 18.5 <= bmi and bmi <= 25:
       print("indeks telesne mase je u preporučenim granicama")
   else:
       print("Masa treba da bude od", 18.5*visina*visina, "do", 25*visina*visina, "kg")

Кућни ред
'''''''''
.. level:: 2
      
.. questionnote::

   Кућни ред забрањује прављење буке пре 6 часова и између 13 и 17
   часова, и након 22 часа. Напиши програм који радницима говори да ли
   у неком датом тренутку могу да изводе бучније радове.

Сматраћемо да су ови интервали полуотворени тј. да је дозвољено
правити буку у интервалу :math:`[6, 13)` и :math:`[17, 22)` и у
програму ћемо проверити да ли време припада неком од тих интервала.
   
.. activecode:: кућни_ред_1   

   sati = 15
   minuta = 23
   if (sati >= 6 and sati < 13) or (sati >= 17 and sati < 22):
       print("Možete da izvodite bučnije radove")
   else:
       print("Ne bi trebalo da izvodite bučnije radove")
	 	 	
или

.. activecode:: кућни_ред_2
		
   if not (sati < 6 or (13 <= sati and sati < 17) or sati >= 22):
       print("Možete da izvodite bučnije radove")
   else:
       print("Ne bi trebalo da izvodite bučnije radove")

Преступна година
''''''''''''''''
.. level:: 2
      
.. questionnote::

   Година је преступна ако је дељива са 4 и није дељива са 100 или је
   дељива са 400. Напиши функцију која проверава да ли је година
   преступна.

.. infonote::

   Овако уведен систем преступних година уводи тачно 97 преступних
   година на сваких 400 година. Тиме је време једне године тачно (97 ×
   366 + 303 × 365) / 400 = 365,2425 дана, што је прилично добра
   процена вредности 365,242374, коју астрономи обично узимају за
   трајање године.

Подсетимо се, проверу да ли је број дељив другим бројем можеш извршити
тако што израчунаш остатак при дељењу (коришћењем оператора ``%``) и
провериш да ли је он једнак нули. На пример, проверу да ли је година
дељива са 4 можеш извршити изразом ``godina % 4 == 0``.

.. activecode:: преступна_година
   
   def prestupna(godina):
       return True

   ====
   from unittest.gui import TestCaseGui

   class myTests(TestCaseGui):

       def testOne(self):
          self.assertEqual(prestupna(2000), True, "2000 јесте преступна")
          self.assertEqual(prestupna(1900), False, "1900 није преступна")
          self.assertEqual(prestupna(2017), False, "2017 није преступна")
          self.assertEqual(prestupna(2020), True, "2020 јесте преступна")

   myTests().main()

Предност у превозу
''''''''''''''''''
.. level:: 2
   
.. questionnote::

   Предност у превозу имају труднице, деца млађа од 7 година и старији
   од 65 година. Допуни програм који испитује да ли особа има предност
   (параметар ``godine`` садржи број година, а параметар ``trudnica``
   има вредност ``true`` ако је особа трудница, односно ``false`` у
   супротном).


.. activecode:: предност_у_превозу
   :nocodelens:
		
   def prednost(godine, trudnica)
       return True

   ====
   from unittest.gui import TestCaseGui

   class myTests(TestCaseGui):

       def testOne(self):
          self.assertEqual(prednost(34, True), True, "Трудница од 34 године има предност")
          self.assertEqual(prednost(6, False), True, "Дете од 6 година има предност")
          self.assertEqual(prednost(8, False), False, "Дете од 8 година нема предност")
          self.assertEqual(prednost(42, False), False, "Мушкарац од 42 године нема предност")
          self.assertEqual(prednost(67, False), True, "Пензионерка од 67 година има предност")

   myTests().main()

      






