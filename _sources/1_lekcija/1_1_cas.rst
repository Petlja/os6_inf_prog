Добро дошли!
============ 


Хајде да, као прави програмери, правимо програме уз помоћ тастатуре. Користићемо језик *Python* (Пајтон), који, као и 
сваки језик на свету, има свој речник, односно речи помоћу којих састављамо реченице. Ове реченице зовемо наредбе. 
Одмах на почетку набројаћемо вам занимљивости које ћете открити у овој лекцији:

- Упознаћете робота Карела и окружење у коме он живи и ради, а које подсећа на видео-игру. Помозимо Карелу у његовим пословима!
- Цртаћете уз помоћ пријатеља. Наш програм управљаће малом корњачом која црта оно што замислите!
- На крају, доћи ћете до мало занимљивог рачунања уз помоћ програма.


1.1. Линијски програми
####################################

На самом почетку бисмо, кроз игру, могли да научимо неке основне појмове програмирања. 
Одличан начин за то је писање програма за робота који се зове Карел (по чешком писцу Карелу Чапеку, 
који је измислио реч „робот“).

.. ytpopup:: oDS9gJS-WvI
      :width: 735
      :height: 415
      :align: center


Наредбе које Карел разуме
-------------------------

Робот Карел се налази у лавиринту и разуме следеће наредбе:

- ``napred()`` - помери се једно поље напред,
- ``levo()`` - окрени се 90 степени налево (у смеру супротном од кретања казаљки на сату),
- ``desno()`` - окрени се 90 степени надесно (у смеру кретања казаљке на сату),
- ``uzmi()`` - покупи лоптицу са поља на којем се налазиш,
- ``ostavi()`` - спусти лоптицу на поље на којем се налазиш.
  
Робот Карел разуме и програмски језик *Python*. Програмирајући нашег робота, научићеш неколико основних наредби тог 
језика. 

.. technicalnote::
   Испрограмирали смо га тако да ради унутар прегледача веба и не мораш ништа додатно да инсталираш да би 
   писао програме за Карела. 

Линијски програми
-----------------
  
Прикажимо употребу ових наредби на неколико једноставних програма.

Иди до лоптице и узми је
''''''''''''''''''''''''
.. questionnote::

   Напиши програм на основу којега ће робот доћи на поље (3, 3) и
   покупити лоптицу.

.. suggestionnote::
   Пре почетка решавања било ког задатка, потребно је прво погледати како је робот 
   тренутно усмерен у лавиринту (налево, надесно, нагоре или надоле),
   како бисмо му дали исправне инструкције за његово кретање ка извршењу задатка.


Да би дошао на жељено поље, робот мора два пута да иде напред, да се окрене налево, затим опет да иде два пута 
напред и на крају да покупи лоптицу. То му можемо наредити наредним програмом.
   
.. karel:: Карел_на_поље_33

   {
        setup:function() {
            var world = new World(5,5);
            world.setRobotStartAvenue(1);
            world.setRobotStartStreet(1);
            world.setRobotStartDirection("E");
            world.putBall(3, 3);
            world.addEWWall(1, 1, 2);
            world.addNSWall(2, 2, 2);
            world.addEWWall(2, 3, 3);
            world.addNSWall(3, 1, 2);
            world.addNSWall(3, 4, 1);
            world.addNSWall(1, 5, 1);
            world.addEWWall(4, 1, 1);
            
	    var robot = new Robot();

	    var code = ["from karel import *",
					"napred()      # idi napred",
					"napred()      # idi napred",
					"levo()        # okreni se nalevo",
					"napred()      # idi napred",
					"napred()      # idi napred",
					"uzmi()        # uzmi lopticu"];
            return {robot:robot, world:world, code:code};
        },
	
        isSuccess: function(robot, world) {
           return robot.getStreet() === 3 &&
           robot.getAvenue() === 3 &&
	   robot.getBalls() === 1;
        },
   }

Прва линија програма ``from karel import *`` је линија којом почињу сви програми за Карела – у њу не треба да 
уносиш измене. Након тога се роботу задаје једна по једна наредба, свака у посебном реду. Иза сваке наредбе 
роботу исписане су заграде (њих не смемо изоставити). Додатно, свака наредба мора да буде у посебном реду и 
испред наредби не смеш да пишеш размаке. Оваква правила називају се синтаксна правила и ако се неко од њих 
не испоштује, долази до **синтаксне грешке**. Програм не сме садржати ниједну синтаксну грешку да би могао 
успешно да се покрене.


Текст иза знака ``#`` представља такозване коментаре. Робот тај текст не чита – написали смо га само да би ти било 
јасније шта која наредба значи.

У наредном програму има неколико синтаксних грешака. Ако покушаш да га покренеш, добићеш поруку:


::

   SyntaxError: bad input on line 4

Приметићеш да је грешка пријављена у линији 4 иако је грешка направљена већ у линији 3, где су изостављене заграде. 
Ово се често дешава, па када анализираш где је грешка настала, увек провери и линију испред оне која је у поруци о 
грешци наведена.

Исправи све синтаксне грешке, па онда покрени програм.


.. karel:: Карел_на_поље_33_грешке

   {
        setup:function() {
            var world = new World(5,5);
            world.setRobotStartAvenue(1);
            world.setRobotStartStreet(1);
            world.setRobotStartDirection("E");
            world.putBall(3, 3);
            world.addEWWall(1, 1, 2);
            world.addNSWall(2, 2, 2);
            world.addEWWall(2, 3, 3);
            world.addNSWall(3, 1, 2);
            world.addNSWall(3, 4, 1);
            world.addNSWall(1, 5, 1);
            world.addEWWall(4, 1, 1);
          
			var robot = new Robot();

	    var code = ["from karel import *",
					"napred()",
					"napred",
					"  levo()",
					"napred)",
					"    napred[]",
					" uzmi{}"];
            return {robot:robot, world:world, code:code};
        },
	
        isSuccess: function(robot, world) {
           return robot.getStreet() === 3 &&
           robot.getAvenue() === 3 &&
	   robot.getBalls() === 1;
        },
   }

У претходном програму је свака наредба Карелу била написана у посебној линији. Могуће је задати и више 
наредби у једној линији, али тада их је потребно раздвојити тачком и запетом, тј. симболом ``;`` .

.. karel:: Карел_на_поље_33_један_ред

   {
        setup:function() {
            var world = new World(5,5);
            world.setRobotStartAvenue(1);
            world.setRobotStartStreet(1);
            world.setRobotStartDirection("E");
            world.putBall(3, 3);
            world.addEWWall(1, 1, 2);
            world.addNSWall(2, 2, 2);
            world.addEWWall(2, 3, 3);
            world.addNSWall(3, 1, 2);
            world.addNSWall(3, 4, 1);
            world.addNSWall(1, 5, 1);
            world.addEWWall(4, 1, 1);
          
			var robot = new Robot();

	    var code = ["from karel import *",
                        "napred(); napred(); levo(); napred(); napred(); uzmi()"];
            return {robot:robot, world:world, code:code};
        },
	
        isSuccess: function(robot, world) {
           return robot.getStreet() === 3 &&
           robot.getAvenue() === 3 &&
	   robot.getBalls() === 1;
        },
   }

Решење у којем је свака наредба у посебној линији се ипак мало чешће користи 
(вероватно зато што се такав код лакше чита и мења, ако је то потребно).


Програмирање слагањем блокова
'''''''''''''''''''''''''''''

Пошто претпостављамо да већ познајеш програмирање уз помоћ слагања
блокова (на пример у програму *MIT Scratch* или на сајту `code.org
<http://code.org/>`_), омогућили смо ти да прве програме пишеш на два начина: текстом у програмском језику *Python* 
или слагањем блокова. Сваки програм написан за робота Карела се може приказати и у облику блокова – довољно је да 
притиснеш дугме *Blockly*. Програм састављен од блокова можеш мењати и прилагођавати (можеш променити редослед блокова, 
додати нове блокове, обрисати неке блокове, променити вредности уписане у неке блокове и слично). Када завршиш, 
притиском на дугме Врати у *Python*, које се налази у доњем десном углу прозора, тај програм можеш добити написан у 
језику *Python*. Ускоро ћеш и сам видети да је писање текста често бржи и ефикаснији начин креирања програма 
(зато сви професионални програмери своје програме пишу у текстуалним, а не у блоковским језицима), тако да те 
охрабрујемо да од самог почетка кренеш да програме уносиш куцањем текста у програмском језику *Python*, а да блокове 
користиш само као помоћно средство када се заглавиш.


Испробај ту могућност на примеру који смо малопре видели, тако што ћеш коришћењем блокова додати наредбе којe недостају, 
тако да робот дође до поља (3, 3) и покупи лоптицу.

.. karel:: Карел_на_поље_33_Blockly
   :blockly:

   {
        setup:function() {
            var world = new World(5,5);
            world.setRobotStartAvenue(1);
            world.setRobotStartStreet(1);
            world.setRobotStartDirection("E");
            world.putBall(3, 3);
            world.addEWWall(1, 1, 2);
            world.addNSWall(2, 2, 2);
            world.addEWWall(2, 3, 3);
            world.addNSWall(3, 1, 2);
            world.addNSWall(3, 4, 1);
            world.addNSWall(1, 5, 1);
            world.addEWWall(4, 1, 1);
          
			var robot = new Robot();

	    var code = ["from karel import *",
					"napred()      # idi napred",
					"napred()      # idi napred",
					"napred()      # idi napred",
					"napred()      # idi napred"];
            return {robot:robot, world:world, code:code};
        },
	
        isSuccess: function(robot, world) {
           return robot.getStreet() === 3 &&
           robot.getAvenue() === 3 &&
	   robot.getBalls() === 1;
        },
   }

Ако покренеш програм пре него што додаш наредбу да робот скрене, видећеш да ће доћи до грешке током извршавања 
твог програма. Наиме, у трећем кораку напред робот ће ударити у зид и добићеш поруку  ``Робот је ударио у зид``.

Коришћење блокова приказано је и у наредној видео-лекцији.

.. ytpopup:: MO1UTwP0F9A
      :width: 735
      :height: 415
      :align: center

   
Пребаци лоптицу на поље (3, 5)
''''''''''''''''''''''''''''''

.. questionnote::

   Сада ћемо нашем роботу дати мало компликованији задатак. Потребно је да дође до поља (4, 3) на којем се 
   налази једна лоптица, а затим да ту лоптицу пребаци у рупу на пољу (3, 5).

Допуни наредни програм тако да робот изврши дати задатак.   
   
.. karel:: Карел_пребаци_лоптицу
   :blockly:

   {
	setup: function() {
	   var world = new World(5, 5);
           world.setRobotStartAvenue(1);
           world.setRobotStartStreet(1);
           world.setRobotStartDirection("E");
           world.putBall(4, 3);
           world.putHole(3, 5);
           world.addEWWall(1, 1, 2);
           world.addNSWall(2, 2, 2);
           world.addEWWall(2, 3, 3);
           world.addNSWall(3, 1, 2);
           world.addNSWall(3, 4, 1);
           world.addNSWall(1, 5, 1);
           world.addEWWall(4, 1, 1);
           var robot = new Robot();
	   var code = [ "from karel import *",
					"napred()",
					"napred()",
					"levo()",
					"napred()",
					"napred()",
					"desno()",
					"napred()",
					"uzmi()",
					"???    # dodaj naredbe koje nedostaju ovde",
					"ostavi()"]
           return {robot:robot, world:world, code: code};
	},

	isSuccess: function(robot, world) {
	   return world.getBalls(3, 5) == 0;
	}
   }

Ако користиш блокове, на месту на ком треба да додаш нове наредбе добићеш један велики зелени блок који 
треба да избациш (на пример, да га превучеш до канте за смеће) и да га замениш одговарајућим наредбама. 

.. suggestionnote::
   Наравно, покушај задатак да решиш као прави профи програмер: писањем програмског кода, а не слагањем блокова!
