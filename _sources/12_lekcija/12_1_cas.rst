12.1 Понављање
##############

У програмима често имамо потребе да се одређена наредба или блок
наредби понове више пута. У програмима са Карелом и корњачом упознали
смо се са коришћењем петљи `for` и `while`. У овом поглављу видећемо
како се ове петље могу користити у конзолним програмима.


Понављање наредби дати број пута
--------------------------------

Размислимо како бисмо написали програм који десет пута исписује
``Zdravo``.  На основу онога што смо до сада научили можемо десет пута
навести наредбу ``print("Zdravo")``.

.. activecode:: здраво_десет_пута_1

   print("Zdravo")
   print("Zdravo")
   print("Zdravo")
   print("Zdravo")
   print("Zdravo")
   print("Zdravo")
   print("Zdravo")
   print("Zdravo")
   print("Zdravo")
   print("Zdravo")

Приметимо да је овај програм било напорно откуцати (чак иако смо
користили технику копирања и лепљења). Ако сада замислимо да желимо да
корисник прво унесе број колико пута жели да се испише поздрав, тада
је јасно да тај програм не можемо испрограмирати на овај начин, већ су
нам потребне мало напредније технике програмирања. Решење долази у
облику *петљи*, тј. наредби које омогућавају да се нека наредба или
неки блок наредби понове више пута. За почетак размотримо наредбу
којом постижемо да се нешто понови дати број пута. Најједноставнији
начин да то урадимо је да употребимо наредбу облика ``for i in
range(n):``. Наредни програм 10 пута исписује поруку ``Zdravo``,
коришћењем петље ``for``.

.. activecode:: здраво_десет_пута
		
   for i in range(10):        # ponovi 10 puta:
       print("Zdravo")        #    ispiši tekst "Zdravo"

Након петље можемо исписати и додатну поруку (у овом примеру то је
порука ``Doviđenja``).

.. activecode:: здраво_десет_пута_2
		
   for i in range(10):        # ponovi 10 puta:
       print("Zdravo")        #    ispiši tekst "Zdravo"
   print("Doviđenja")         # ispiši tekst "Doviđenja"

Приметимо да је испис поруке ``Zdravo`` био увучен, јер се понавља,
док испис поруке ``Doviđenja`` није био увучен јер се не понавља више
пута. Ако бисмо увукли обе наредбе исписа, онда би се обе понављале 10
пута, што није оно што желимо.

.. activecode:: здраво_десет_пута_3
		
   for i in range(10):        # ponovi 10 puta:
       print("Zdravo")        #    ispiši tekst "Zdravo"
       print("Doviđenja")     #    ispiši tekst "Doviđenja"

   
Увежбајмо овај облик понављања кроз још неколико једноставних примера.
      
Обими 5 троуглова
'''''''''''''''''
      
.. questionnote::

   Напиши програм који израчунава обиме пет једнакостраничних
   троуглова чије дужине страница корисник уноси.

.. activecode:: обими_пет_троуглова
		
   for i in range(5):                                # ponovi 5 puta:
       a = int(input("Unesi dužinu stranice:"))      #   učitaju dužinu stranice
       O = 0                                         #   izračunaj obim - ispravi ovaj red
       print(O)                                      #   ispiši obim

Приметимо да су све наредбе у телу петље увучене у односу на петљу,
али и да су међусобно поравнате, што мора увек бити случај (у
супротном се добија порука да програм није исправан).
      
Поздрави сваког ученика
'''''''''''''''''''''''
      
.. questionnote::

   Напиши програм који учитава неколико имена ученика и сваког
   појединачно поздравља. 

.. activecode:: поздрав_ученицима
   
   n = int(input("Unesi broj učenika: "))           # učitaj broj učenika n
   for ???:                                         # ponovi n puta: 
       ime = input("Kako se zoveš?")                #    unesi ime učenika - ispravi ovaj red
       print("Zdravo, ti se zoveš:", ime)           #    pozdravi učenika

Примети да овај пут уместо константне вредности унутар ``range`` треба
навести променљиву ``n``, што значи да ће се петља извршавати различит
број пута (у зависности од броја ``n`` који корисник уноси). Такође,
примети да променљива ``ime`` не чува број него текст. Приликом уноса
вредности употребили смо само ``input(...)``, а не
``int(input(...))``, нити ``float(input())``, јер након уноса текста
није потребно из њега прочитати ни целобројну ни реалну бројевну
вредност (чему служе функције ``int`` и ``float``).
      
Опсег бројева - ``range``
-------------------------

Размотримо сада детаљније како функционише петља ``for i in
range(n):`` којом смо постизали да се нешто понови ``n`` пута.  Током
извршавања такве петље променљива ``i`` редом узима вредности ``0``,
``1``, ``2`` итд., све до вредности ``n-1``. На пример, ако је ``n``
једнако ``3``, тада ће се тело петље извршити пет пута и у првом
извршавању тела петље променљива ``i`` ће имати вредност ``0``, у
другом вредност ``1``, а у трећем вредност ``2``. Позив ``range(n)``,
дакле, формира колекцију бројева ``0, 1, 2, ..., n-1`` из које затим
бројачка променљива ``i`` узима редом једну по једну вредност.  Осим
са једним, функцију ``range`` могуће је позвати и са два и са три
параметра. Када се наведу два аргумента ``a`` и ``b``, врши се
набрајање свих елемената из интервала целих бројева ``[a, b-1]``, док
се у случају када се наведу три аргумента ``a``, ``b`` и ``k`` врши
набрајање сваког ``k``-тог елемента тог интервала. Дакле,

- позив ``range(n)`` гради колекцију ``0, 1, 2, ..., n-1``;
- позив ``range(a, b)`` гради колекцију ``a, a+1, ..., b-1``;
- позив ``range(a, b, k)`` гради колекцију ``a, a+k, a+2k, ...,
  a+nk``, где је последњи број одабран тако да буде последњи у овом
  низу који је строго мањи од ``k``.

Провери да ли ово разумеш тако што ћеш одговорити на наредних неколико
питања.
  
.. mchoice:: console__collections_quiz_range1_srp
   :answer_a: range(4)
   :answer_b: range(1, 4)
   :answer_c: range(3)
   :answer_d: range(1, 3)
   :correct: b
   :feedback_a: Покушај поново
   :feedback_b: Тачно
   :feedback_c: Покушај поново
   :feedback_d: Покушај поново

   Који опсег садржи вредности 1, 2, 3 ?

.. mchoice:: console__collections_quiz_range2_srp
   :answer_a: 5
   :answer_b: 6
   :answer_c: 9
   :answer_d: 10
   :correct: a
   :feedback_a: Тачно
   :feedback_b: Покушај поново
   :feedback_c: Покушај поново
   :feedback_d: Покушај поново

   Колико вредности садржи опсег ``range(1, 10, 2)`` ?
   
   
.. infonote::  

   О колекцијама података причаћемо детаљније у наредном поглављу. Нагласимо да је колекција
   ``range`` таква да се њени елементи не чувају истовремено у
   меморији, већ се током рада петље ``for`` гради један по један
   елемент ове колекције. У овом приручнику опсеге ћемо увек користити
   само у склопу петље ``for``.
  
Илуструјмо употребу различитих облика функције ``range`` кроз наредних
неколико задатака.

Испис бројева од 0 до 9
'''''''''''''''''''''''

.. questionnote::

   Употреби петљу да би се исписали бројеви од 0 до 9. 
	   
.. activecode:: бројеви_од_0_до_9
		
   for i in range(0):    # ispravi ovaj red
       print(i)


Испис бројева од a до b
'''''''''''''''''''''''

Када се у позиву функције ``range`` наведе само један аргумент, онда
бројање креће од нуле, међутим, када се наведу два аргумента ``a`` и
``b``, тада бројање креће од ``a`` и завршава се са ``b-1``.

.. questionnote::

   Напиши програм који учитава два броја ``a`` и ``b`` и затим
   исписује све бројеве од ``a`` до ``b`` (укључујући и њих).

.. activecode:: бројеви_од_a_до_b
		
   a = int(input("Odakle se broji: "))
   b = int(input("Dokle se broji: "))		
   for i in range(0, 0):    # ispravi ovaj red
       print(i)

Игра жмурке
'''''''''''

Ако се у позиву функције ``range`` наведу три аргумента, трећи од њих
одређује корак за који се у сваком кораку петље врши увећавање
бројачке променљиве. На пример, ``range(1, 10, 2)`` означава да
бројачка променљива креће од ``1`` и да се у сваком кораку увећава за
``2``, све док је строго мања од ``10`` тј. да редом узима вредности
``1``, ``3``, ``5``, ``7`` и ``9``.

.. questionnote::

   У игри жмурке деца броје 5, 10, 15, итд., до 100. Напиши програм
   који исписује баш те бројеве.
   
   
.. activecode:: жмурке

   for i in range(0, 100 + 1, 0):  # ispravi ovaj red
       print(i)
   print("Полазим!")

Аларм који звони на сваких 10 минута
''''''''''''''''''''''''''''''''''''

.. questionnote::

   Сат је навијен тако да између 8:00 и 10:30 звони на сваких 10
   минута.  Напиши програм који исписује времена у којима сат звони.

Задатак је много једноставније реализовати ако време представимо само
помоћу минута. Зато дефинишемо функције конверзије сати и минута у
минуте и минута у сате и минуте.
   
.. activecode:: сати_и_минути
		
   def u_minute(sat, minut):
       return 0     # ispravi ovaj red

   def u_sate_i_minute(minuti):
       return (minuti // 1, minuti % 1)   # ispravi ovaj red
		
   for minuti in range(u_minute(0, 0), u_minute(0, 0) + 1, 0):  # ispravi ovaj red
       (sat, min) = u_sate_i_minute(minuti)
       print(minuti, "m =", sat, "h", min, "m")
      


