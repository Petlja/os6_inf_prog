12.3. Угнежђене петље
#####################

Тело петље могу да чине било које наредбе, па и наребе гранања, али и
друге петље.

Таблица множења
'''''''''''''''


.. questionnote::

   Напиши програм који исписује таблицу множења бројева од 1 до n. На
   пример, за n=4 таблица треба да изгледа овако.

::

   1*1=1 1*2=2 1*3=3 1*4=4
   2*1=2 2*2=4 2*3=6 2*4=8
   3*1=3 3*2=6 3*3=9 3*4=12
   4*1=4 4*2=8 4*3=12 4*4=16

Основу решења овог задатка чини пролазак кроз све парове бројева од 1
до n. За то се користе угнежђена петља. Бројач спољашње петље одговара
броју врсте тј. првом чиниоцу (у првој врсти је први чинилац увек 1, у
другој 2, у трећој 3, у четвртој 4). Бројач унутрашње петље одговара
броју колоне тј. другом чиниоцу (у првој колони је други чинилац увек
1, у другој 2, у трећој 3, у четвртој 4).

Обратимо пажњу да се цела унутрашња петља понавља ``n`` пута, по
једном за сваку вредност бројача спољашње петље. Када се ``i`` постави
на ``1`` тада ``j`` редом узима све вредности од ``1`` до ``4``. Након
тога се се ``i`` постави на ``2``, а ``j`` из почетка узима све
вредности од ``1`` до ``4`` и тако даље.

У телу унутрашње петље знају се вредности бројача ``i`` и ``j`` и лако
можемо израчунати њихов производ и исписати одговарајућу
једнакост. Штампање ћемо подесити тако да се не прави размак између
делова (постављањем ``sep=""``) и тако да се не прелази у наредни ред,
већ размак након штампе (постављањем ``end=" "``). У нови ред ћемо
прелазити након завршетка рада унутрашње петље (тако што ће последња
наредба спољашње петље бити ``print()``).

Наредни програм је скоро готов - прошири наредбу ``print`` тако да се
израчунава и штампа одговарајући производ.
   
.. activecode:: таблица_множења

   n = 5		
   for i in range(1, n+1):
       for j in range(1, n+1):
           print(i, "*", j, "=", end=" ", sep="")
       print()


Сви парни бројеви прве стотине
''''''''''''''''''''''''''''''
   
.. questionnote::

   Напиши програм који исписује све парне бројеве прве стотине.

.. activecode:: парни_бројеви_прве_стотине

   for i in ???  # dopuni ovaj red
       print(i)

Распродаја ципела
'''''''''''''''''

.. questionnote::

   У току је распродаја ципела. Напиши програм који корисницима
   омогућава да израчунају снижену цену ципела које желе да купе. У
   петљи се уноси цена ципела и проценат снижења и исписује се снижена
   цена. Програм престаје са радом када се унесе цена 0.

Једна могућност је да учитамо цену на почетку провера, а затим да у
петљи ``while`` проверавамо да ли је цена различита од нуле и да, ако
јесте, израчунамо снижење и учитамо поново цену и проценат како
бисмо се припремили за следећи корак.
   
.. activecode:: снижене_цене_while1

   cena = float(input("Unesi cenu cipela:"))
   procenat = float(input("Unesi procenat sniženja:"))
   while cena != 0:
       snizena_cena = ???  # izračunavamo sniženu cenu
       print("Snižena cena:", snizena_cena)
       ??? # učitavamo novu cenu i procenat
   
Још једно могуће решење се заснива на томе да направимо бесконачну
петљу (петљу у ``while True:`` којој је услов увек испуњен), на чијем
ћемо почетку учитавати цену и проценат. Ако је цена нула, петљу ћемо
прекидати наредбом ``break``, а у супротном ћемо израчунавати и
исписивати снижени износ.

.. activecode:: снижене_цене_while2

   while True:
       cena = float(input("Unesi cenu cipela:"))
       procenat = float(input("Unesi procenat sniženja:"))
       if cena == 0:
           break
       snizena_cena = ???  # izračunavamo sniženu cenu
       print("Snižena cena:", snizena_cena)

.. reveal:: снижене_цене_while_reveal
   :showtitle: Прикажи решење
   :hidetitle: Сакриј решење

   .. activecode:: снижене_цене_while_решење

      cena = float(input("Unesi cenu cipela:"))
      procenat = float(input("Unesi procenat sniženja:"))
      while cena != 0:
          snizena_cena = cena * (1 - procenat / 100)
          print("Snižena cena:", snizena_cena)
          cena = float(input("Unesi cenu cipela:"))
          procenat = float(input("Unesi procenat sniženja:"))

          
