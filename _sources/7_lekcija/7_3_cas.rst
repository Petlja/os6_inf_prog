7.3 Тестирање и дебаговање програма
###################################
   
Аутоматско тестирање програма
-----------------------------

У програмирању је веома битно да програми које напишеш увек дају тачне
резултате. Најчешћи начин да се провери коректност програма је да се
он покрене на већем броју унапред припремљених тест-примера (у којима
су дате различите вредности улазних параметара) и да се провери да ли
на њима даје очекиване резултате. Ако програм на њима исправно ради,
веома вероватно је да ће исправно радити и на свим другим
примерима. Трудили смо се да у наставку омогућимо аутоматско тестирање
на што већем броју задатака. Један такав је и наредни.

.. questionnote::

   Марко је прочитао књигу за три дана. Првог дана је прочитао 100
   страна. Другог дана је прочитао 17 страна више него првог, а трећег
   два пута више него другог. Колико та књига има страна? Напиши
   програм који то одређује, а ради исправно и када је број страна
   прочитаних првог дана другачији од 100.

Програм је у тренутном облику неисправан (увек исписује
нулу). Притисни дугме **Тестирај програм** и видећеш да резултати који
се добију нису једнаки оним очекиваним и приказаће ти се поља црвене
боје, што указује на грешке.

.. activecode:: читање
   :runortest: prvi_dan, ukupno
   :enablecopy:

   # -*- acsection: general-init -*-
   # -*- acsection: var-init -*-
   prvi_dan  = 100
   # -*- acsection: main -*-
   drugi_dan = 0      # popravi ovaj red
   treci_dan = 0      # popravi ovaj red
   ukupno = 0         # popravi ovaj red
   # -*- acsection: after-main -*-
   print(ukupno)
   ====
   from unittest.gui import TestCaseGui
   class myTests(TestCaseGui):
       def testOne(self):
          for prvi_dan, ukupno in [(84, 387), (122, 539), (153, 663)]:
             self.assertEqual(acMainSection(prvi_dan = prvi_dan)["ukupno"],ukupno,"Ако је први дан прочитао %s стране, број страна књиге је %s." % (prvi_dan, ukupno))
   myTests().main()

Поправи претходни програм тако што ћеш изменити само оне редове који
су обележени - друге редове не дирај. Када завршиш поново притисни
дугме **Тестирај програм**. Ако је све како треба, приказаће ти се три
поља зелене боје. Наиме, када притиснеш то дугме програм се тестира на
основу неколико унапред припремљених тестова. Програм се неколико пута
пушта из почетка (за сваки тест по једном), али тако да се уместо
вредности ``100`` променљивој ``prvi_dan`` додељују неке друге
вредности (у овом конкретном примеру покушава се са вредностима
``84``, ``122`` и ``153``). Након тога програм који си
написао/написала израчунава укупан број страна и резултат који је твој
програм израчунао се пореди са стварним бројем страна књиге за тај
тест (за улаз ``84`` стварни број страна је ``387``, за улаз ``122``
стварни број страна је ``539``, а за улаз ``153`` стварни број страна
је ``663``). Ако се та два броја поклапају, на том случају за ту почетну
вредност се приказује зелена боја, а ако не, приказује се црвена боја.

Извршавање корак по корак
-------------------------

Једна корисна техника која помаже да се боље разуме начин рада неког
програма, али и да се уоче и исправе евентуалне грешке у програму је
то да се програм извршава корак по корак, тј. да се извршава једна по
једна његова наредба, при чему се након сваке извршене наредбе прати
вредност променљивих у програму.

.. infonote::

   Извршавање програма корак по корак уз праћење вредности свих
   међурезултата назива се **дебаговање** (требљење од бубица) и јако
   је важна техника за откривање грешака у програмима. У старим
   рачунарима који су били велики као читава соба, дешавало се да
   мољци и сличне бубе уђу у рачунар и проузрокују неки квар. Од тада
   се све грешке у програмима називају **багови** тј. **бубице**.
   
Илуструјмо ову могућност на сајту Петље кроз наредни, једноставни,
пример.

Воћњак са јабукама
''''''''''''''''''

.. questionnote::
   
   Пера је засадио 380 стабала јабуке. Ђура је засадио 142 стабла јабука
   више од Пере, а Мика је засадио два пута више од Пере. Колико су
   стабала засадили заједно?


.. activecode:: јабуке
   :runortest: pera, zajedno
   :enablecopy:
   
   Исправи следећи програм тако да исправно израчунава колико су
   стабала засадили заједно (програм треба исправно да ради и ако се
   број стабала које је засадио Пера промени).
   
   ~~~~
   # -*- acsection: general-init -*-
   # -*- acsection: var-init -*-
   pera = 380
   # -*- acsection: main -*-
   djura = ???
   mika = ???
   zajedno = pera + djura + mika
   # -*- acsection: after-main -*-
   print(zajedno)
   ====
   from unittest.gui import TestCaseGui
   class myTests(TestCaseGui):
       def testOne(self):
          for pera, zajedno in [(100, 542), (200, 942)]:
             self.assertEqual(acMainSection(pera = pera)["zajedno"],zajedno,"Ако је Пера засадио %s стабала, заједно су засадили %s стабала." % (pera, zajedno))
   myTests().main()
   
Притисни сада дугме **Корак по корак**. Оно ти пружа могућност да
програм извршаваш корак по корак. Дугметом *Forward* извршаваш
наредну наредбу (ону обележену црвеном стрелицом). Наредба која је
претходно извршена обележена је светло-плавом стрелицом. У делу
*Frames* можеш видети вредности свих до сада израчунатих резултата,
док у прозору тога можеш видети излаз програма (резултате одштампане
наредбом ``print``).

И у овом задатку је омогућено аутоматско тестирање, па дугметом
**Тестирај програм** провери да ли је твоје решење тачно.

Дебаговање у окружењу IDLE
--------------------------

Напредније програме нећеш писати на сајту Петље, већ у
специјализованом окружењу за развој програма, какво је Python
IDLE. Таква окружења такоће омогућавају извршавање програма корак по
корак, уз праћење вредности променљивих. Детаљан опис како се ово ради
дат је у последњој лекцији овог курса.
