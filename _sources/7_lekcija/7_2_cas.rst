7.2. Променљиве - имена међурезултата
#####################################
   
Писање сложених израза се може избећи, а програм се може начинити мало
разумљивијим ако међурезултате именујемо. Погледајмо наредни пример
програма који такође решава претходни задатак.

.. activecode:: производ_збира_и_разлике_1
		
   zbir = 874 + 437
   razlika = 915 - 364
   proizvod = zbir * razlika
   print(proizvod)

   
Збиру смо доделили име ``zbir``, разлици име ``razlika``, а производу
име ``proizvod`` (уместо ``zbir`` и ``razlika`` могли смо, на пример,
користити и имена ``prvi_cinilac``, ``drugi_cinilac``). Иако се на
овај начин добија програм који мало дужи него полазни, он је мало
разумљивији, јер се његовим читањем може јасно видети да се прво тражи
израчунавање збира, затим разлике и затим њиховог производа. То се
десило пре свега захваљујући пажљивом одабиру имена која смо
употребили и веома је важно у програмима користити имена која читаоцу
програма дају назнаке шта тај програм заправо израчунава. Рачунар
једнако успешно извршава програм ма која имена да употребиш.  Ипак,
имај на уму да програме читају и људи који те програме пишу,
исправљају и дорађују, а њима је прилично важно да текст програма лако
разумеју. У већини случајева си читалац програма управо ти, тако да
давањем илустративних имена променљивима данас помажеш заправо себи у
будућности.

.. infonote::
   
   Имена која смо дали међурезултатима се у програмирању називају
   **променљиве**. Променљиве су јако важан концепт о коме ће бити
   много више речи касније. До тада ћемо их користити на потпуно исти
   начин као у математици - само као имена придружена одређеним
   вредностима.


Имена која користимо смеју да садрже само слова, цифре и подвлаке
(знак ``_``) - не смеју да садрже размаке, цртице ни остале
интерпункцијске знаке.


.. infonote::

        Рецимо да постоје и нека правила која се односе на имена (каже се и
        **идентификаторе**) која можемо користити.  Прво, постоји разлика
        између великих и малих слова и није исто да ли смо употребили
        ``zbir`` или ``Zbir``. Препоручује се да у именима користимо само
        слова енглеске абецеде (тзв. ошишану латиницу), бројеве и подвлаку
        (симбол ``_``), коју ћемо користити да повежемо више речи у једно
        име. У именима не можемо користити размаке, зарезе и слично, нити
        име можемо започети цифром. Дозвољена имена су, на пример, ``x``,
        ``obim``, ``drugi_sabirak``, ``broj_sekundi``, ``a2``, а недозвољена
        су, на пример, ``3d_grafika`` (јер почиње цифром), ``prvi sabirak``
        (јер садржи размак) и ``jezik_c#`` (јер садржи недозвољени знак
        ``#``).
       
        .. mchoice:: identifikatori
         :multiple_answers:
         :answer_a: xyZ
         :answer_b: Indijana_Dzons_3
         :answer_c: 3stvari
         :answer_d: zdravo-svima
         :correct: a,b
         :feedback_a: Било која комбинација слова је у реду.
         :feedback_b: Подвлаке се могу користити да повежу више делова у целину.
         :feedback_c: Цифра не сме бити први карактер.
         :feedback_d: Цртице се не смеју користити у склопу имена (цртица
                      тј. минус заправо означава одузимање).
       
         Шта од наведеног може бити исправно име променљиве у језику
         Python? Означи све тачне одговоре.


Решавање задатака у општим бројевима
------------------------------------

Коришћењем променљивих алгоритам можемо описати коришћењем назива, а
не вредности улазних величина, што често даје разумљивији текст
програма и даје могућност да се исти алгоритам примени и на друге
вредности улазних величина, без потребе за компликованим модификацијама
програма. На тај начин постижемо да једним програмом не решавамо само
један задатак, већ заправо читаву групу сродних задатака (у којима је
проблем који се решава исти, али су бројеви различити). Илуструјмо ово
на једном једноставном примеру.

Склапање коцкица
''''''''''''''''

Јова склапа играчкице од лего-коцкица. Жели да склопи један ауто за
који су му потребна 4 точка, 8 великих и 4 мале коцке и један бицикл
за који су му потребна 2 точка и 6 малих коцкица. Ако је цена точка 79
динара, цена мале коцке 59, а цена велике коцке 99 динара, напиши
програм који израчунава колико је динара потребно Јови да би купио све
потребне делове.

Једно могуће решење задатка је да се резултат израчуна формирањем
једног сложеног израза.

.. activecode:: склапање_коцкица_1
		
   print(4*79 + 8*99 + 4*59 + 2*79 + 6*59)

Иако овај програм коректно израчунава решење, он је прилично
неразумљив и тешко га је прилагодити, ако се, на пример, промене цене
делова. Преформулишимо сада програм коришћењем променљивих.

.. activecode:: склапање_коцкица_2
		
   cena_tocak = 79
   cena_velika = 99
   cena_mala = 59

   cena_automobil = 4*cena_tocak + 8*cena_velika + 4*cena_mala
   cena_bicikl = 2*cena_tocak + 6*cena_mala

   cena_ukupno = cena_automobil + cena_bicikl
   print(cena_ukupno)

Иако је добијени програм очигледно дужи, он је много разумљивији. Сви
улазни подаци, који могу да се промене (у овом случају то су цене
делова) наведени су у посебним променљивим на почетку скрипта. Ако се
цене промене, променићемо само првих неколико редова скрипта и
покренути скрипт поново, чиме ћемо добити резултат за нове улазне
величине. Тако наш програм постаје програм који не решава само један
одређен задатак, већ целу породицу задатака истог облика, а у којима
се разликују само улазни подаци.


Учитавање података при покретању програма
-----------------------------------------

У програмском језику Python и програмским језицима у којима се пишу
скриптови уобичајено је да се подаци задају на почетку програма и у
наредним програмима ћемо често користити такав приступ. Међутим,
постоје програмски језици у којима текст програма не мора бити
доступан пре покретања и у којима није могуће изменити улазне податке
пре покретања програма. Стога је честа пракса да се вредности улазних
података не уписују у текст програма, већ да се програм напише тако да се
приликом његовог покретања од корисника тражи да унесе вредности
улазних података. То је могуће урадити и у Python скриптовима.

Један начин да се затражи од корисника да унесе неки цео број је да се
у програму наведе ``broj = int(input("Unesi broj:"))``. Ако желимо да
допустимо да се уносе и реални бројеви, тада у програму морамо навести
``broj = float(input("..."))``. Уместо променљиве ``broj``, наравно,
унети број може да се запамти у било којој другој променљивој. Такође,
порука може бити сликовитија и текст ``Unesi broj`` између двоструких
наводника је могуће променити (на пример, користићемо текст ``Unesi
cenu točka:``).

Погледајмо сада како изгледа претходни програм када се напише на тај
начин.

.. activecode:: склапање_коцкица_3
		
   cena_tocak = int(input("Unesi cenu točka:"))
   cena_velika = int(input("Unesi cenu velike kocke:"))
   cena_mala = int(input("Unesi cenu male kocke:"))

   cena_automobil = 4*cena_tocak + 8*cena_velika + 4*cena_mala
   cena_bicikl = 2*cena_tocak + 6*cena_mala

   cena_ukupno = cena_automobil + cena_bicikl
   print(cena_ukupno)


Ниске
-----

Приметили смо да смо приликом учитавања (наредбе ``input``) или исписа
(наредбе ``print``) текст који се дословно приказује кориснику
наводили између наводника. Такав текст назива се **ниска** или
**стринг** (од енглеске речи string која значи ниска). На пример,
ниске су ``"Zdravo"`` или ``"Programski jezik Python."``.  Уместо
двоструких равноправно се могу користити и једноструки наводници (на
пример, ``'Zdravo'``), међутим, да бисмо вас мање збуњивали, ми ћемо
увек користити двоструке наводнике.

Текст (па и ниске) се састоји од слова (малих и великих), цифара,
размака, интерпункцијских знакова (на пример тачака, зареза, упитника,
узвичника) и слично. Све те знакове једним именом називамо
**карактери**. Неки програмски језици подржавају само веома узак скуп
карактера (од слова је могуће користити само слова енглеске абецеде),
међутим, програмски језик Python3 користи широк скуп карактера који
обухвата и све карактере потребне за писање на већини језика света,
укључујући и слова ћириличног и латиничног писма која се користе у
српском језику.

.. infonote::

   Поменути основни скуп карактера довољан само за запис текста на
   енглеском језику назива се ASCII, док се овај шири скуп карактера
   назива Unicode.

.. infonote::

   У језику Python 3 могуће је и имена променљивих написати ћирилицом,
   међутим, то некада може довести до проблема (ако се, на пример,
   едитор текста који се користи да се програм откуца не подеси
   адекватно), тако да ћемо за сваки случај имена променљивих увек
   писати латиницом, без коришћења српских слова (š, ž, č, ...).
      

.. infonote::

     Ако текст садржи знаке наводника или неке друге специјалне
     карактере потребно је те карактере обележити косим цртама. На
     пример, ``"Rekao je: \"Zdravo, svima\".`` Ове косе црте се не
     исписују приликом извршавања програма и штампања ниски.

     .. activecode:: escape_sequence
		   
         print("Rekao je: \"Zdravo, svima\".")   
         
Текст може бити сачуван и у променљивама. На пример,

.. activecode:: поздрави_перу

   ime = "Pera Perić"
   print("Zdravo, ti se zoveš", ime)
   
Текст можемо учитати и од корисника, након покретања програма. За то
можемо употребити функцију ``input``. На пример, наредни програм пита
корисника како се зове, а онда га поздрави.

.. activecode:: поздрави_корисника

   ime = input("Unesi svoje ime: ")
   print("Zdravo, ti se zoveš", ime)

Приметимо да се приликом учитавања бројева заправо учитава текст
(помоћу ``input``), а онда се из учитаног текста одређују бројеви који
су тим текстом представљени. Таква претварања (конверзије) текста у
број врше се помоћу ``int`` и ``float``.

Радом са текстом и нискама ћемо се много детаљније бавити током наредних
часова.
