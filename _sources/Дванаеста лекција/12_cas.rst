Час 11 - Понављање
##################

У програмима често имамо потребе да се одређена наредба или блок
наредби понове више пута. У програмима са Карелом и корњачом упознали
смо се са коришћењем петљи `for` и `while`. У овом поглављу видећемо
како се ове петље могу користити у конзолним програмима.


Понављање наредби дати број пута
--------------------------------

Размислимо како бисмо написали програм који десет пута исписује
``Zdravo``.  На основу онога што смо до сада научили можемо десет пута
навести наредбу ``print("Zdravo")``.

.. activecode:: здраво_десет_пута_1

   print("Zdravo")
   print("Zdravo")
   print("Zdravo")
   print("Zdravo")
   print("Zdravo")
   print("Zdravo")
   print("Zdravo")
   print("Zdravo")
   print("Zdravo")
   print("Zdravo")

Приметимо да је овај програм било напорно откуцати (чак иако смо
користили технику копирања и лепљења). Ако сада замислимо да желимо да
корисник прво унесе број колико пута жели да се испише поздрав, тада
је јасно да тај програм не можемо испрограмирати на овај начин, већ су
нам потребне мало напредније технике програмирања. Решење долази у
облику *петљи*, тј. наредби које омогућавају да се нека наредба или
неки блок наредби понове више пута. За почетак размотримо наредбу
којом постижемо да се нешто понови дати број пута. Најједноставнији
начин да то урадимо је да употребимо наредбу облика ``for i in
range(n):``. Наредни програм 10 пута исписује поруку ``Zdravo``,
коришћењем петље ``for``.

.. activecode:: здраво_десет_пута
		
   for i in range(10):        # ponovi 10 puta:
       print("Zdravo")        #    ispiši tekst "Zdravo"

Након петље можемо исписати и додатну поруку (у овом примеру то је
порука ``Doviđenja``).

.. activecode:: здраво_десет_пута_2
		
   for i in range(10):        # ponovi 10 puta:
       print("Zdravo")        #    ispiši tekst "Zdravo"
   print("Doviđenja")         # ispiši tekst "Doviđenja"

Приметимо да је испис поруке ``Zdravo`` био увучен, јер се понавља,
док испис поруке ``Doviđenja`` није био увучен јер се не понавља више
пута. Ако бисмо увукли обе наредбе исписа, онда би се обе понављале 10
пута, што није оно што желимо.

.. activecode:: здраво_десет_пута_3
		
   for i in range(10):        # ponovi 10 puta:
       print("Zdravo")        #    ispiši tekst "Zdravo"
       print("Doviđenja")     #    ispiši tekst "Doviđenja"

   
Увежбајмо овај облик понављања кроз још неколико једноставних примера.
      
Обими 5 троуглова
'''''''''''''''''
.. level:: 1
      
.. questionnote::

   Напиши програм који израчунава обиме пет једнакостраничних
   троуглова чије дужине страница корисник уноси.

.. activecode:: обими_пет_троуглова
		
   for i in range(5):                                # ponovi 5 puta:
       a = int(input("Unesi dužinu stranice:"))      #   učitaju dužinu stranice
       O = 0                                         #   izračunaj obim - ispravi ovaj red
       print(O)                                      #   ispiši obim

Приметимо да су све наредбе у телу петље увучене у односу на петљу,
али и да су међусобно поравнате, што мора увек бити случај (у
супротном се добија порука да програм није исправан).
      
Поздрави сваког ученика
'''''''''''''''''''''''
.. level:: 1
      
.. questionnote::

   Напиши програм који учитава неколико имена ученика и сваког
   појединачно поздравља. 

.. activecode:: поздрав_ученицима
   
   n = int(input("Unesi broj učenika: "))           # učitaj broj učenika n
   for ???:                                         # ponovi n puta: 
       ime = input("Kako se zoveš?")                #    unesi ime učenika - ispravi ovaj red
       print("Zdravo, ti se zoveš:", ime)           #    pozdravi učenika

Примети да овај пут уместо константне вредности унутар ``range`` треба
навести променљиву ``n``, што значи да ће се петља извршавати различит
број пута (у зависности од броја ``n`` који корисник уноси). Такође,
примети да променљива ``ime`` не чува број него текст. Приликом уноса
вредности употребили смо само ``input(...)``, а не
``int(input(...))``, нити ``float(input())``, јер након уноса текста
није потребно из њега прочитати ни целобројну ни реалну бројевну
вредност (чему служе функције ``int`` и ``float``).
      
Опсег бројева - ``range``
-------------------------

Размотримо сада детаљније како функционише петља ``for i in
range(n):`` којом смо постизали да се нешто понови ``n`` пута.  Током
извршавања такве петље променљива ``i`` редом узима вредности ``0``,
``1``, ``2`` итд., све до вредности ``n-1``. На пример, ако је ``n``
једнако ``3``, тада ће се тело петље извршити пет пута и у првом
извршавању тела петље променљива ``i`` ће имати вредност ``0``, у
другом вредност ``1``, а у трећем вредност ``2``. Позив ``range(n)``,
дакле, формира колекцију бројева ``0, 1, 2, ..., n-1`` из које затим
бројачка променљива ``i`` узима редом једну по једну вредност.  Осим
са једним, функцију ``range`` могуће је позвати и са два и са три
параметра. Када се наведу два аргумента ``a`` и ``b``, врши се
набрајање свих елемената из интервала целих бројева ``[a, b-1]``, док
се у случају када се наведу три аргумента ``a``, ``b`` и ``k`` врши
набрајање сваког ``k``-тог елемента тог интервала. Дакле,

- позив ``range(n)`` гради колекцију ``1, 2, ..., n-1``;
- позив ``range(a, b)`` гради колекцију ``a, a+1, ..., b-1``;
- позив ``range(a, b, k)`` гради колекцију ``a, a+k, a+2k, ...,
  a+nk``, где је последњи број одабран тако да буде последњи у овом
  низу који је строго мањи од ``k``.

Провери да ли ово разумеш тако што ћеш одговорити на наредних неколико
питања.
  
.. mchoice:: console__collections_quiz_range1_srp
   :answer_a: range(4)
   :answer_b: range(1, 4)
   :answer_c: range(3)
   :answer_d: range(1, 3)
   :correct: b
   :feedback_a: Покушај поново
   :feedback_b: Тачно
   :feedback_c: Покушај поново
   :feedback_d: Покушај поново

   Који опсег садржи вредности 1, 2, 3 ?

.. mchoice:: console__collections_quiz_range2_srp
   :answer_a: 5
   :answer_b: 6
   :answer_c: 9
   :answer_d: 10
   :correct: a
   :feedback_a: Тачно
   :feedback_b: Покушај поново
   :feedback_c: Покушај поново
   :feedback_d: Покушај поново

   Колико вредности садржи опсег ``range(1, 10, 2)`` ?
   
   
.. infonote::  

   О колекцијама података причаћемо детаљније у `наредном поглављу
   <../StrukturePodataka/toctree.html>`_. Нагласимо да је колекција
   ``range`` таква да се њени елементи не чувају истовремено у
   меморији, већ се током рада петље ``for`` гради један по један
   елемент ове колекције. У овом приручнику опсеге ћемо увек користити
   само у склопу петље ``for``.
  
Илуструјмо употребу различитих облика функције ``range`` кроз наредних
неколико задатака.

Испис бројева од 0 до 9
'''''''''''''''''''''''
.. level:: 1

.. questionnote::

   Употреби петљу да би се исписали бројеви од 0 до 9. 
	   
.. activecode:: бројеви_од_0_до_9
		
   for i in range(0):    # ispravi ovaj red
       print(i)


Испис бројева од a до b
'''''''''''''''''''''''
.. level:: 1

Када се у позиву функције ``range`` наведе само један аргумент, онда
бројање креће од нуле, међутим, када се наведу два аргумента ``a`` и
``b``, тада бројање креће од ``a`` и завршава се са ``b-1``.

.. questionnote::

   Напиши програм који учитава два броја ``a`` и ``b`` и затим
   исписује све бројеве од ``a`` до ``b`` (укључујући и њих).

.. activecode:: бројеви_од_a_до_b
		
   a = int(input("Odakle se broji: "))
   b = int(input("Dokle se broji: "))		
   for i in range(0, 0):    # ispravi ovaj red
       print(i)

Игра жмурке
'''''''''''
.. level:: 1

Ако се у позиву функције ``range`` наведу три аргумента, трећи од њих
одређује корак за који се у сваком кораку петље врши увећавање
бројачке променљиве. На пример, ``range(1, 10, 2)`` означава да
бројачка променљива креће од ``1`` и да се у сваком кораку увећава за
``2``, све док је строго мања од ``10`` тј. да редом узима вредности
``1``, ``3``, ``5``, ``7`` и ``9``.

.. questionnote::

   У игри жмурке деца броје 5, 10, 15, итд., до 100. Напиши програм
   који исписује баш те бројеве.
   
   
.. activecode:: жмурке

   for i in range(0, 100 + 1, 0):  # ispravi ovaj red
       print(i)
   print("Полазим!")

Аларм који звони на сваких 10 минута
''''''''''''''''''''''''''''''''''''
.. level:: 2

.. questionnote::

   Сат је навијен тако да између 8:00 и 10:30 звони на сваких 10
   минута.  Напиши програм који исписује времена у којима сат звони.

Задатак је много једноставније реализовати ако време представимо само
помоћу минута. Зато дефинишемо функције конверзије сати и минута у
минуте и минута у сате и минуте.
   
.. activecode:: сати_и_минути
		
   def u_minute(sat, minut):
       return 0     # ispravi ovaj red

   def u_sate_i_minute(minuti):
       return (minuti // 1, minuti % 1)   # ispravi ovaj red
		
   for minuti in range(u_minute(0, 0), u_minute(0, 0) + 1, 0):  # ispravi ovaj red
       (sat, min) = u_sate_i_minute(minuti)
       print(minuti, "m =", sat, "h", min, "m")
      

Условна петља
-------------

Као што смо видели петља ``for`` се користи да се неке наредбе понове
одређен, познат број пута, да се бројачком променљивом прође кроз неку
правилну серију бројева (узастопне бројеве или бројеве набројане са
неким кораком, попут оних у примеру игре жмурке) или да се прође кроз
све елементе листе, ниске или речника. У неким ситуацијама потребно је
богатије контролисање понављања, тј. потребно је неке наредбе
понављати све док је испуњен неки услов. За то се користи тзв. условна
петља тј. петља ``while``.

И петљу ``while`` можемо употребити да прођемо кроз серију правилно
размакнутих бројева. Урадимо поново задатак са игром жмурке.

Жмурке - петља ``while``
''''''''''''''''''''''''
.. level:: 1

.. activecode:: жмурке_while

   broj = 5                  # neka je broj = 5
   while broj <= 100:        # dok je broj <= 100:
       print(broj)            #    ispisi broj
       broj = broj + 5        #    uvecaj broj za 5

Приметимо да се у телу петље крије наредба ``broj = broj + 5`` која
проузрокује да се вредност променљиве ``broj`` промени тако што се
њена текућа вредност увећа за пет (о промени вредности променљиве и
наредбама овог облика више је речено у поглављу о променама вредности
променљивих). Изврши овај програм корак по корак и пажљиво прати како
се мењају вредности променљиве ``broj``.

Петљу ``while`` употребљавамо када не знамо унаред колико пута треба
извршити тело неке петље.

Цифре броја
'''''''''''
.. level:: 3

.. questionnote::

   Напиши програм који одређује и исписује цифре датог природног броја
   (већег од 1), кренувши од цифре јединица. На пример, ако корисник
   унесе број 1234, програм треба да испише 4, 3, 2, 1 (сваку цифру у
   посебном реду).

Раније смо видели да се последња цифра броја може одредити тако што се
одреди остатак при дељењу тог броја са 10, а да се она може обрисати
из броја тако што се пронађе целобројни количник тог броја са 10. Да
би се одредиле све цифре броја, потребно је понављати одређивање,
исписивање и брисање последње цифре броја, све док број не постане
нула.
   
.. activecode:: цифре_броја_петља

   n = int(input("Unesi broj:"))
   while n > 0:
       print(n % 10)
       n = n // 10

Изврши обавезно овај програм корак по корак и прати вредности
променљивих.  На пример, ако унесеш број ``123``, приликом првог
уласка у петљу проверава се да ли је ``123 > 0`` и пошто јесте,
исписује се ``123 % 10`` тј. ``3``, а број ``n`` се замењује са ``123
// 10`` тј. ``12``. Након тога се проверава да ли је ``12 > 0`` и
пошто јесте, исписује се ``12 % 10`` тј. ``2``, а број ``n`` се
замењује са ``12 // 10`` тј. ``1``. Након тога се проверава да ли је
``1 > 0`` и пошто јесте, исписује се ``1 % 10`` тј. ``1``, а број
``n`` се замењује са ``1 // 10`` тј. ``0``. На крају се проверава да
ли је ``0 > 0`` и пошто није, петља се завршава. Дакле, програм
исписује цифре ``3``, ``2`` и ``1``, баш како је и тражено.

Исправан унос оцене
'''''''''''''''''''

.. questionnote::

   Напиши програм који од ученика тражи да унесе оцену, све док не
   унесе оцену која је исправна (цео број између 1 и 5).

На почетку ћемо тражити да корисник унесе оцену и затим ћемо
исписивати поруку о грешци и тражити да се оцена уноси све док унета
оцена не припада интервалу од 1 до 5.
   
.. activecode:: исправан_унос_оцене

   ocena = int(input("Unesi ocenu od 1 do 5"))
   while not (1 <= ocena and ocena <= 5):
       print("Ocena nije ispravna.")
       ocena = int(input("Unesi ocenu od 1 do 5"))
   print("Ispravno  je uneta ocena", ocena) 

Препоручујемо ти да овај облик петље вежбаш и помоћу робота Карела,
јер у задацима које смо вам припремили постоји велики број њих који
захтевају употребу петље ``while``.

Угнежђене петље
---------------

Тело петље могу да чине било које наредбе, па и наребе гранања, али и
друге петље.

Таблица множења
'''''''''''''''
.. level:: 3

.. questionnote::

   Напиши програм који исписује таблицу множења бројева од 1 до n. На
   пример, за n=4 таблица треба да изгледа овако.

::

   1*1=1 1*2=2 1*3=3 1*4=4
   2*1=2 2*2=4 2*3=6 2*4=8
   3*1=3 3*2=6 3*3=9 3*4=12
   4*1=4 4*2=8 4*3=12 4*4=16

Основу решења овог задатка чини пролазак кроз све парове бројева од 1
до n. За то се користе угнежђена петља. Бројач спољашње петље одговара
броју врсте тј. првом чиниоцу (у првој врсти је први чинилац увек 1, у
другој 2, у трећој 3, у четвртој 4). Бројач унутрашње петље одговара
броју колоне тј. другом чиниоцу (у првој колони је други чинилац увек
1, у другој 2, у трећој 3, у четвртој 4).

Обратимо пажњу да се цела унутрашња петља понавља ``n`` пута, по
једном за сваку вредност бројача спољашње петље. Када се ``i`` постави
на ``1`` тада ``j`` редом узима све вредности од ``1`` до ``4``. Након
тога се се ``i`` постави на ``2``, а ``j`` из почетка узима све
вредности од ``1`` до ``4`` и тако даље.

У телу унутрашње петље знају се вредности бројача ``i`` и ``j`` и лако
можемо израчунати њихов производ и исписати одговарајућу
једнакост. Штампање ћемо подесити тако да се не прави размак између
делова (постављањем ``sep=""``) и тако да се не прелази у наредни ред,
већ размак након штампе (постављањем ``end=" "``). У нови ред ћемо
прелазити након завршетка рада унутрашње петље (тако што ће последња
наредба спољашње петље бити ``print()``).

Наредни програм је скоро готов - прошири наредбу ``print`` тако да се
израчунава и штампа одговарајући производ.
   
.. activecode:: таблица_множења

   n = 5		
   for i in range(1, n+1):
       for j in range(1, n+1):
           print(i, "*", j, "=", end=" ", sep="")
       print()

Домаћи задатак
--------------

Уради за домаћи наредних неколико задатака.

Сви парни бројеви прве стотине
''''''''''''''''''''''''''''''
   
.. questionnote::

   Напиши програм који исписује све парне бројеве прве стотине.

.. activecode:: парни_бројеви_прве_стотине

   for i in ???  # dopuni ovaj red
       print(i)

Распродаја ципела
'''''''''''''''''

.. questionnote::

   У току је распродаја ципела. Напиши програм који корисницима
   омогућава да израчунају снижену цену ципела које желе да купе. У
   петљи се уноси цена ципела и проценат снижења и исписује се снижена
   цена. Програм престаје са радом када се унесе цена 0.

Једна могућност је да учитамо цену на почетку провера, а затим да у
петљи ``while`` проверавамо да ли је цена различита од нуле и да, ако
јесте, израчунамо снижење и учитамо поново цену и проценат како
бисмо се припремили за следећи корак.
   
.. activecode:: снижене_цене_while1

   cena = float(input("Unesi cenu cipela:"))
   procenat = float(input("Unesi procenat sniženja:"))
   while cena != 0:
       snizena_cena = ???  # izračunavamo sniženu cenu
       print("Snižena cena:", snizena_cena)
       ??? # učitavamo novu cenu i procenat
   
Још једно могуће решење се заснива на томе да направимо бесконачну
петљу (петљу у ``while True:`` којој је услов увек испуњен), на чијем
ћемо почетку учитавати цену и проценат. Ако је цена нула, петљу ћемо
прекидати наредбом ``break``, а у супротном ћемо израчунавати и
исписивати снижени износ.

.. activecode:: снижене_цене_while2

   while True:
       cena = float(input("Unesi cenu cipela:"))
       procenat = float(input("Unesi procenat sniženja:"))
       if cena == 0:
           break
       snizena_cena = ???  # izračunavamo sniženu cenu
       print("Snižena cena:", snizena_cena)

.. reveal:: снижене_цене_while_reveal
   :showtitle: Прикажи решење
   :hidetitle: Сакриј решење

   .. activecode:: снижене_цене_while_решење

      cena = float(input("Unesi cenu cipela:"))
      procenat = float(input("Unesi procenat sniženja:"))
      while cena != 0:
          snizena_cena = cena * (1 - procenat / 100)
          print("Snižena cena:", snizena_cena)
          cena = float(input("Unesi cenu cipela:"))
          procenat = float(input("Unesi procenat sniženja:"))

          
