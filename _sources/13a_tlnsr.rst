Структуре података
==================

Све у вези са структурама података можеђеш прочитати у нашем `Приручнику <https://petlja.org/biblioteka/r/lekcije/prirucnik-python-gim/strukturepodataka-cas13>`__. 
Овде ће бити дат само пресек основних појмова.


Торке и листе
-------------

Запитајмо се како бисмо у програму могли представити списак имена
кошаркаша у једном тиму? Нека је то наша кошаркашка репрезентација
која је 2016. играла на Олимпијади. Претпоставићемо да сваки играч има
свој редни број и то од 1 до 12.

Један могући начин би био да уведемо пуно засебних променљивих:

.. activecode:: кошаркаши_без_листе
   :passivecode: true

   igrac1 = "Милош Теодосић"
   igrac2 = "Мирослав Радуљица"
   igrac3 = "Богдан Богдановић"
   igrac4 = "Владимир Штимац"
   ...

Међутим, оваква репрезентација података није згодна јер не можемо
једноставно да одговоримо на разна интересантна питања о кошаркашима
(на пример, колико укупно има играча, ко носи број који се уноси са
улаза, који број носи неки дати играч и слично). Бољи начин да
представимо списак играча је да употребимо **листу**.

.. activecode:: кошаркаши
   :passivecode: true
		
   igraci = ["Стефан Јовић", "Марко Симоновић", "Богдан Богдановић", \
             "Никола Калинић", "Милан Мачван", "Стефан Марковић", \
	     "Немања Недовић", "Мирослав Радуљица", "Милош Теодосић",\
	     "Никола Јокић", "Владимир Штимац", "Стефан Бирчевић"]
   
Појединачни чланови листе називају се и **елементи**. Елементи листе
могу бити ниске (као у овом примеру), али и бројеви, друге листе и
било шта друго. Чак је могуће у исту листу поставити елементе
различитог типа (додуше, то нећемо често користити). Као пример листе
бројева, формирајмо листу висина ових кошаркаша.

.. activecode:: висине_кошаркаша
   :passivecode: true

   visine = [198, 203, 198, 203, 206, 199, 193, 213, 195, 211, 211, 210]	

Листу дефинишемо тако што између угластих заграда (заграда ``[`` и
``]``) наводимо елементе раздвојене зарезима. Приметимо да је ова
листа имена кошаркаша била веома дугачка, тако да смо је прегледности
ради разбили у више редова (зато смо на крају редова који се
настављају морали навести косе црте ``\``). Листа висина је била
краћа, па смо све елементе навели у истом реду.

Издвајање елемената листе
&&&&&&&&&&&&&&&&&&&&&&&&&

Ниске и листе имају доста заједничког (ниска се у неку руку може
схватити као листа карактера). Елементима листе приступа се на основу
њихове позиције тј. **индекса**. Бројање креће од нуле, па је првом
елементу листе могуће приступити са ``igraci[0]``. Негативни индекси
упућују на бојање од краја (с десна на лево), па је последњем елементу
могуће приступити помоћу ``igraci[-1]``. Елементима између позиција
``a`` и ``b`` укључујући позицију ``a``, али искључујући позицију
``b`` могуће је приступити помоћу ``igraci[a:b]``. Употребимо ово да
решимо неколико задатака о нашим играчима. Погледај `пример <https://petlja.org/biblioteka/r/lekcije/prirucnik-python-gim/strukturepodataka-cas13#id8>`__-


Претрага листе
&&&&&&&&&&&&&&

Проналажење најмање позиције (индекса) на којој се налази неки тражени
елемент може се урадити коришћењем методе ``index``, као што је то
приказано у наредном задатку. Погледај `пример <https://petlja.org/biblioteka/r/lekcije/prirucnik-python-gim/strukturepodataka-cas13#id8>`__.


Функције за рад са листама
&&&&&&&&&&&&&&&&&&&&&&&&&&

Функцијом ``len`` израчунавамо дужину листе, функцијом ``sum``
израчунавамо збир елемената листе, функцијом ``min`` најмањи елемент у
листи, а функцијом ``max`` највећи.

Ове функције можемо употребити да једноставно решимо разне практичне
задатке.

Просечна оцена
''''''''''''''
.. level:: 1

.. questionnote::

   Дате су оцене из неколико предмета. Израчунај просечну оцену.

.. activecode:: просек_оцена
		
   ocene = [5, 4, 5, 3, 5]
   prosek = sum(ocene) / len(ocene)
   print(prosek)


Надовезивање листи
&&&&&&&&&&&&&&&&&&

Две листе можемо надовезати (спојити у једну) коришћењем операције
``+`` (аналогно надовезивању ниски).

Висине девојчица и дечака у одељењу
'''''''''''''''''''''''''''''''''''
.. level:: 1

.. questionnote::

 Познате су висине девојчица и висине дечака у једном одељењу. Направи
 листу свих висина и израчунај затим број и просечну висину свих
 ђака.

.. activecode:: спајање_листа
 
   visine_devojcica = [165, 153, 155, 155, 157]
   visine_decaka = [170, 168, 173, 156, 172]
   visine = visine_devojcica + visine_decaka
   print(len(visine))
   print(sum(visine) / len(visine))

Сортирање листе
&&&&&&&&&&&&&&&

Елементе листе је веома једноставно уредити од најмањег до највећег
(па и обратно, од највећег до најмањег).

Најјефтинији за динар
'''''''''''''''''''''
.. level:: 2

.. questionnote::

   Дате су цене три производа. Ко купи сва три, најјефтинији ће добити
   за динар. Колико ће платити?

Један начин је да сортирамо листу од три цене тако да цене у листи
буду уређене од најмање до највеће, а затим да први елемент листе
(цену најјефтинијег производа) заменимо са 1 и на крају саберемо
елементе листе.

.. activecode:: најјефтинији_за_динара_1

   cene = [1420, 1799, 1569]
   cene_po_redu = sorted(cene)
   cene_po_redu[0] = 1
   print(sum(cene_po_redu))

Рецимо и да смо задатак могли решити и без сортирања.   

.. activecode:: најјефтинији_за_динар_2   

   cene = [1420, 1799, 1569]
   print(sum(cene) - min(cene) + 1)

Три најјефтинија и најскупља производа
''''''''''''''''''''''''''''''''''''''
.. level:: 1

.. questionnote::

   Дата је листа цена производа. Колико коштају три најјефтинија, а
   колико три најскупља производа?

.. activecode:: најјефтинији_и_најскупљи_производи

   cene = [58.00, 104.95, 117.50, 11.95, 10.4, 37.95, 85.5]
   sortirane_cene = sorted(cene)
   print(sum(sortirane_cene[0:3]))
   print(sum(sortirane_cene[-3:]))
   
Сортирање имена ученика
'''''''''''''''''''''''
.. level:: 1
   
.. questionnote::

   Наставница треба да у дневник унесе имена ученика, међутим, од
   педагога је добила списак ученика који није сортиран. Напиши
   програм који помаже наставници да добије ученике сортиране по
   абецедном реду.

.. activecode:: лексикографско_сортирање_ниски

		
   ucenici = ["Ljubić Milenko", "Stojković Milica", "Vilimonović Aleksandar", \
              "Jokić Đurađ", "Filipović Kalina", "Zlatković Jasmina"]
   print(sorted(ucenici))

Напоменимо да овакво сортирање може имати проблем са нашим
карактерима ćđščž.

Распакивање листе
&&&&&&&&&&&&&&&&&

Ако знамо дужину листе, могуће је на лак начин именовати сваки њен
елемент тј.  сместити сваки елемент у посебну променљиву. На пример,
претпоставимо да листа математичари садржи пуна имена четири велика
математичара: Ренеа Декарта, Жозефа Луја Лагранжа, Карла Фридриха
Гауса и Леонарда Ојлера. Направимо четири посебне променљиве
``dekart``, ``lagranz``, ``gaus`` и ``ojler`` које ће садржати пуна
имена одговарајућих математичара.

Један начин да се то уради је да се помоћу индекса приступи појединачним
елементима листе. 

.. activecode:: математичари

   matematicari = ["Рене Декарт", "Жозеф Луј Лагранж", "Карл Фридрих Гаус", "Леонард Ојлер"]
   dekart = matematicari[0]
   lagranz = matematicari[1]
   gaus = matematicari[2]
   ojler = matematicari[3]
		
Међутим, постоји и једноставнији начин да се постигне исти ефекат.
   
.. activecode:: распакивање_листе

   matematicari = ["Рене Декарт", "Жозеф Луј Лагранж", "Карл Фридрих Гаус", "Леонард Ојлер"]
   [dekart, lagranz, gaus, ojler] = matematicari
   print(gaus)

Пошто и листа са десне и листа са леве стране имају по четири
елемента, онда се првој променљивој са леве стране додељује први
елемент листе са десне стране, другој променљивој, други елемент листе
и тако даље. Овај поступак називамо **распакивање листе**.

Скупови
-------

Ако знамо имена свих фудбалера који су давали голове током једне
ревијалне утакмице и то редом, како су давали голове можемо
једноставно одредити скуп свих фудбалера који су се уписали у листу
стрелаца. Наиме, ако формирамо скуп на основу имена стрелаца
аутоматски ће бити уклоњени дупликати.

.. activecode:: скуп
		
   strelci = {"Mesi", "Ronaldo", "Mesi", "Ibrahimović", "Ibrahimović", "Nejmar", "Nejmar"}
   print(strelci)

Скуп дефинишемо тако што између витичастих заграда (заграда ``{`` и
``}``) наводимо елементе раздвојене зарезима. Елементи скупа у овом
примеру су биле ниске, а можемо разматрати и скупове елемената другог
типа (на пример, скупове бројева).

Скуп од листе/ниске
&&&&&&&&&&&&&&&&&&&

Ако су елементи скупа чланови неке листе, можемо лако од листе добити
скуп (коришћењем функције ``set`` као у следећем програму).

.. activecode:: скуп_од_листе
		
   golovi = ["Mesi", "Ronaldo", "Mesi", "Ibrahimović", "Ibrahimović", "Nejmar", "Nejmar"]
   strelci = set(golovi)
   print(strelci)

И од ниске можемо једноставно добити скуп карактера које она садржи
(опет помоћу функције ``set``).

Скуповне операције
&&&&&&&&&&&&&&&&&&

У језику Python можемо веома једноставно израчунати **унију**,
**пресек** и **разлику** скупова. Ако су ``A`` и ``B`` скупови, онда
је ``A | B`` њихова унија, ``A & B`` њихов пресек, а ``A - B`` њихова
разлика. Провери да ли се сећаш ових операција из математике тако што
ћеш решити наредни тест.


.. dragndrop:: identifier
    :feedback: Feedback that is displayed if things are incorrectly matched--is optional
    :match_1: A & B|||{3}
    :match_2: A | B|||{3, 4, 5, 6, 7}
    :match_3: A - B|||{6, 7}
    :match_4: B - A|||{4, 5}
    :match_5: (A - B) | (B - A)|||{4, 5, 6, 7}

    Ако је A = {3, 6, 7}, а B = {3, 4, 5}, повежи скуповне
    операције са њиховим резултатима.


Прикажимо како се скуповне операције могу употребити у решењима
неколико задатака.

Девојчице које тренирају два спорта
'''''''''''''''''''''''''''''''''''
.. level:: 1
   
.. questionnote::

  Један скуп садржи девојчице из одељења које тренирају ритмичку
  гимнастику, а други оне које тренирају одбојку. Одреди скуп
  девојчица које тренирају оба спорта, скуп девојчица које тренирају
  бар један од њих и скуп девојчица које тренирају само одбојку.

.. activecode:: скупови_спортисткиња  

   ritmicka = {"Ana", "Milica", "Jovana", "Gordana"}
   odbojka = {"Tara", "Nađa", "Milica", "Jovana", "Aleksandra"}
   dva_sporta = ritmicka & odbojka
   bar_jedan_sport = ritmicka | odbojka
   samo_odbojka = odbojka - ritmicka
   print(dva_sporta)
   print(bar_jedan_sport)
   print(samo_odbojka)

Торке
-----

Неколико појединачних података можемо груписати коришћењем уређених
парова или уређених n-торки. На пример, позицију фигуре на шаховској
табли можемо представити помоћу уређеног пара који чини ознака врсте
(слова од ``a`` до ``h``) и ознака колоне (броја од 1 до 8). На
пример, ``("b", 6)``. Слично, позиције на географској карти се описују
помоћу географске ширине и дужине тј. помоћу пара реалних бројева.
Тако се град Париз налази на позицији која се може описати помоћу пара
``(48.8566, 2.3522)``. Време можемо представити помоћу уређене тројке
коју чине сат, минут и секунд (на пример, ``(7, 25, 37)``).

Као што ћемо видети, торке су веома сличне листама. Главна разлика је
то што се у листе могу додавати елементи, док су торке фиксиране
дужине и једном када направимо торку нема начина да се она промени (не
постоји начин да јој се додају, уклоне нити промене елементи).

Индексирање и распакивање торки
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Индексирање парова врши се на исти начин као индексирање листа (на
позицији 0 налази се први елемент торке, на позицји 1 други и тако
даље). Слично као и код листе и торке се могу распаковати.

Речници
-------

Листе нам дају могућност да организујемо податке за које је познат
неки редослед и у којима сваки податак има свој редни број (на пример,
листу смо употребили да организујемо имена путника у авиону или
податке о месецима у години) и приступ елементима листе врши се на
основу њиховог индекса (редног броја, тј. позиције). Међутим, често
подаци представљају неко пресликавање у којем на основу датог *кључа*
желимо да приступимо *вредности* која је придружена том кључу. На
пример, на основу шифре производа приступамо његовој цени, на основу
ЈМБГ грађана приступамо његовом имену, на основу броја банковног
рачуна приступамо салду (износу новца) на том рачуну и слично. У тим
ситуацијама уместо листе много је боље користити **речнике** (каже се
и мапе или асоцијативне низове).

Дефинисање и коришћење речника
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Цене аутомобила
'''''''''''''''
.. level:: 1

.. questionnote::

   Аутомобили у каталогу имају придружене цене и ми желимо да у нашем
   програму можемо да одредимо цену аутомобила на основу његовог
   модела. Напиши програм који на основу унетог модела аутомобила
   (ниска) одређује његову цену (цео број).

.. image:: ../_images/sajam_automobila.jpg
   :width: 300px   
   :align: center

Кључна одлука за ефикасно решење овог задатка је да каталог цена
аутомобила представимо помоћу речника.

.. activecode:: цене_аутомобила
		
   cene_automobila = {"fiat 500l": 11990, 
                      "renault clio": 9650, 
                      "toyota corolla": 13990}
   automobil = input("Unesi model automobila:")
   print(cene_automobila[automobil])

У претходном примеру модели аутомобила су кључеви који се пресликавају
у цене аутомобила које су вредности. Кључеви су биле ниске, а
вредности цели бројеви, што је чест случај.

