Понављање
=========

Понављање наредби дати број пута
--------------------------------

Размислимо како бисмо написали програм који десет пута исписује
``Zdravo``.  На основу онога што смо до сада научили можемо десет пута
навести наредбу ``print("Zdravo")``.

.. activecode:: здраво_десет_пута_1

   print("Zdravo")
   print("Zdravo")
   print("Zdravo")
   print("Zdravo")
   print("Zdravo")
   print("Zdravo")
   print("Zdravo")
   print("Zdravo")
   print("Zdravo")
   print("Zdravo")

Приметимо да је овај програм било напорно откуцати (чак иако смо
користили технику копирања и лепљења). Ако сада замислимо да желимо да
корисник прво унесе број колико пута жели да се испише поздрав, тада
је јасно да тај програм не можемо испрограмирати на овај начин, већ су
нам потребне мало напредније технике програмирања. Решење долази у
облику *петљи*, тј. наредби које омогућавају да се нека наредба или
неки блок наредби понове више пута. За почетак размотримо наредбу
којом постижемо да се нешто понови дати број пута. Најједноставнији
начин да то урадимо је да употребимо наредни облик програма.

.. activecode:: здраво_десет_пута
		
   for i in range(10):        # ponovi 10 puta:
       print("Zdravo")         #    ispiši tekst "Zdravo"

На
пример,

.. activecode:: здраво_десет_пута_2
		
   for i in range(10):        # ponovi 10 puta:
       print("Zdravo")         #    ispiši tekst "Zdravo"
   print("Doviđenja")

Уради следеће примере како би проверио / проверила колико си савладао / савладала пређено градиво:

- `Обим 5 троуглова <https://petlja.org/biblioteka/r/lekcije/prirucnik-python-gim/kontrolatoka-cas11#id7>`__
- `Поздрави сваког ученика <https://petlja.org/biblioteka/r/lekcije/prirucnik-python-gim/kontrolatoka-cas11#id9>`__

Опсег бројева
-------------

Размотримо сада детаљније како функционише петља ``for i in range(n):`` којом смо постизали да се нешто понови n пута. Током извршавања такве петље променљива ``i`` редом узима вредности 0, 1, 2 итд., све до вредности n-1. 
На пример, ако је n једнако 3, тада ће се тело петље извршити пет пута и у првом извршавању тела петље променљива ``i`` ће имати вредност 0, у другом вредност 1, а у трећем вредност 2. Позив range(n), дакле, формира колекцију бројева 0, 1, 2, ..., n-1 из 
које затим бројачка променљива i узима редом једну по једну вредност. Осим са једним, функцију range могуће је позвати и са два и са три параметра. Када се наведу два аргумента a и b, врши се набрајање свих елемената из интервала целих бројева [a, b-1], 
док се у случају када се наведу три аргумента a, b и k врши набрајање сваког k-тог елемента тог интервала. Дакле,

 - позив ``range(n)`` гради колекцију 1, 2, ..., n-1;
 - позив ``range(a, b)`` гради колекцију a, a+1, ..., b-1;
 - позив ``range(a, b, k)`` гради колекцију a, a+k, a+2k, ..., a+nk, где је последњи број одабран тако да буде последњи у овом низу који је строго мањи од k.

Провери да ли ово разумеш тако што ћеш урадити следеће примере.

Испис бројева од 0 до 9
'''''''''''''''''''''''

.. questionnote::

   Употреби петљу да би се исписали бројеви од 0 до 9. 
	   
.. activecode:: бројеви_од_0_до_9
		
   for i in range(0):    # ispravi ovaj red
       print(i)

Испис бројева од a до b
'''''''''''''''''''''''

Када се у позиву функције ``range`` наведе само један аргумент, онда
бројање креће од нуле, међутим, када се наведу два аргумента ``a`` и
``b``, тада бројање креће од ``a`` и завршава се са ``b-1``.

.. questionnote::

   Напиши програм који учитава два броја ``a`` и ``b`` и затим
   исписује све бројеве од ``a`` до ``b`` (укључујући и њих).

.. activecode:: бројеви_од_a_до_b
		
   a = int(input("Odakle se broji: "))
   b = int(input("Dokle se broji: "))		
   for i in range(0, 0):    # ispravi ovaj red
       print(i)


