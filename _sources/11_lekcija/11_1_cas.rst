
11.1. Гранање
#############

У животу често неке ствари радимо само ако је испуњен одређени услов. На
пример, ако пада киша, понећемо кишобран. Ако смо виши 
од 140 cm, пустиће нас да се спуштамо низ водени тобоган
у аква-парку, итд. И у програмирању се одређене наредбе извршавају само ако је
неопходан услов испуњен. Да би се описало условно извршавање неких наредби
користи се наредба ``if`` која у језику *Python* има следећи облик:

.. activecode:: if_синтакса

   if uslov:           # ако је услов испуњен:
       naredba_1       #     изврши наредбу 1
       ...             #     ...
       naredba_k       #     изврши наредбу k

Реч ``if`` на енглеском језику значи „ако“.
      
Не заборави да се након услова обавезно мора навести двотачка (карактер
``:``) и да се наредбе које се извршавају условно морају мало увући
(обично се то уради тако што се испред сваке наредбе откуцају четири
размака).
      
Често се јавља и потреба да се, у зависности од тога да ли је услов
испуњен, изврши једна или друга група наредби. На пример, ако је
корисник унео исправну лозинку, треба му пожелети добродошлицу на сајт,
а у супротном му треба јавити да унета лозинка није исправна. Такав
облик организације извршавања програма се постиже наредбом ``if-else``,
која у језику *Python* има следећи облик:

.. activecode:: if_else_синтакса

   if uslov:        # ако је услов испуњен: 
       naredba_1    #   изврши наредбу 1
       ...          #   ...
       naredba_m    #   изврши наребу m
   else:            # у супротном: 
       naredba_1    #   изврши наредбу 1
       ...          #   ...
       naredba_n    #   изврши наредбу n

Реч ``else`` на енглеском језику значи „у супротном“.
      
Двотачку је потребно навести и иза ``else``, и оба блока наредби треба увући.

Утврди пређено градиво:

.. ytpopup:: NSGFEp0RDVA
      :width: 735
      :height: 415
      :align: center

Поређење (релацијски оператори)
-------------------------------
      
Најједноставнији облик услова је поређење величина. Рачунар уме
да пореди величине (бројеве, али и ниске). За то се користе оператори
слични онима које си већ видео у математици:

- ``a < b`` проверава да ли је ``a`` мање од ``b``,
- ``a > b`` проверава да ли је ``a`` веће од ``b``,
- ``a >= b`` проверава да ли је ``a`` веће или једнако ``b``,
- ``a <= b`` проверава да ли је ``a`` мање или једнако ``b``,
- ``a == b`` проверава да ли је ``a`` једнако ``b``,
- ``a != b`` проверава да ли је ``a`` различито од ``b``.

Резултат примене ових операција је Тачно или Нетачно (кажемо да је
резултат логичка, тј. истинитосна вредност).

Како би се подсетио онога што си прочитао у 
`Приручнику <https://petlja.org/biblioteka/r/lekcije/prirucnik-python-gim/kontrolatoka-cas10>`_,
уради следеће примере:

- `Млади програмери <https://petlja.org/biblioteka/r/lekcije/prirucnik-python-gim/kontrolatoka-cas10#id4>`__
- `Тобоган <https://petlja.org/biblioteka/r/lekcije/prirucnik-python-gim/kontrolatoka-cas10#id7>`__
- `Који је редослед у дневнику <https://petlja.org/biblioteka/r/lekcije/prirucnik-python-gim/kontrolatoka-cas10#id13>`__
- `Парност броја <https://petlja.org/biblioteka/r/lekcije/prirucnik-python-gim/kontrolatoka-cas10#id16>`__

Логичке вредности
-----------------

Променљива може да садржи и истинитосне вредности (кажемо и логичке
вредности или исказне вредности) Тачно (``True``) и Нетачно
(``False``) (обрати пажњу на велико почетно слово). На пример:

.. activecode:: киша

   pada_kisa = True
   if pada_kisa:
       print("Ponesi kišobran")
   else:
       print("Ne moraš da nosiš kišobran")

Ако у претходном програму у првом реду уместо вредности ``True``
поставиш вредност ``False``, добићеш другачију поруку након покретања
програма.

Истинитосна вредност може бити додељена и као резултат неког поређења
(релације). Погледај следећи пример:

.. activecode:: позитиван

   x = int(input("Unesi broj:"))
   pozitivan = x > 0     # tačno ako je x > 0, tj. netačno, u suprotnom
   if pozitivan:
       print("Uneti broj je pozitivan")

Дужи начин да се променљивој додели истинитосна вредност јесте да се
употребе гранање и константе ``True`` и ``False``.

.. activecode:: позитиван1

   x = int(input("Unesi broj:"))
   
   if x > 0:
       pozitivan = True
   else:
       pozitivan = False
      
   if pozitivan:
       print("Uneti broj je pozitivan")

Наравно, када год можемо користићемо краћи и једноставнији начин. 
Истинитосне вредности често можемо користити у
случају функција које нешто испитују и враћају информацију Тачно или Нетачно. На пример, можемо
дефинисати функцију која проверава да ли је број позитиван.

.. activecode:: позитиван_функција

   def pozitivan(x):
       return x > 0
       
   x = int(input("Unesi broj:"))
   if pozitivan(x):
       print("Uneti broj je pozitivan")

Дужи начин да се ова функција дефинише је помоћу гранања.

.. activecode:: позитиван_функција_1

   def pozitivan(x):
        if x > 0:
            return True
        else:
            return False
       
   x = int(input("Unesi broj:"))
   if pozitivan(x):
       print("Uneti broj je pozitivan")
