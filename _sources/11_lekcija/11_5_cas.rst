11.5. Вежбање
#############


Индекс телесне масе
'''''''''''''''''''

   
.. questionnote::

   Индекс телесне масе човека (енгл. body mass index, bmi) се дефинише
   као количник његове масе у килограмима и квадрата његове висине у
   метрима. Нормалним се сматра индекс телесне масе из (затвореног)
   интервала од :math:`18,5\frac{kg}{m^2}` до 25
   :math:`25\frac{kg}{m^2}`. Да ли човек који је висок 180 центиметара
   и тежак 79 килограма нормалне дебљине?

.. activecode:: telesna_masa
		
   masa = 79
   visina = 180 / 100
   bmi = masa / (visina * visina)
   if 18.5 <= bmi and bmi <= 25:
       print("indeks telesne mase je u preporučenim granicama")
   else:
       print("Masa treba da bude od", 18.5*visina*visina, "do", 25*visina*visina, "kg")

Кућни ред
'''''''''

      
.. questionnote::

   Кућни ред забрањује прављење буке пре 6 часова и између 13 и 17
   часова, и након 22 часа. Напиши програм који радницима говори да ли
   у неком датом тренутку могу да изводе бучније радове.

Сматраћемо да су ови интервали полуотворени тј. да је дозвољено
правити буку у интервалу :math:`[6, 13)` и :math:`[17, 22)` и у
програму ћемо проверити да ли време припада неком од тих интервала.
   
.. activecode:: кућни_ред_1   

   sati = 15
   minuta = 23
   if (sati >= 6 and sati < 13) or (sati >= 17 and sati < 22):
       print("Možete da izvodite bučnije radove")
   else:
       print("Ne bi trebalo da izvodite bučnije radove")
	 	 	
или

.. activecode:: кућни_ред_2
		
   if not (sati < 6 or (13 <= sati and sati < 17) or sati >= 22):
       print("Možete da izvodite bučnije radove")
   else:
       print("Ne bi trebalo da izvodite bučnije radove")

Преступна година
''''''''''''''''

      
.. questionnote::

   Година је преступна ако је дељива са 4 и није дељива са 100 или је
   дељива са 400. Напиши функцију која проверава да ли је година
   преступна.

.. infonote::

   Овако уведен систем преступних година уводи тачно 97 преступних
   година на сваких 400 година. Тиме је време једне године тачно (97 ×
   366 + 303 × 365) / 400 = 365,2425 дана, што је прилично добра
   процена вредности 365,242374, коју астрономи обично узимају за
   трајање године.

Подсетимо се, проверу да ли је број дељив другим бројем можеш извршити
тако што израчунаш остатак при дељењу (коришћењем оператора ``%``) и
провериш да ли је он једнак нули. На пример, проверу да ли је година
дељива са 4 можеш извршити изразом ``godina % 4 == 0``.

.. activecode:: преступна_година
   
   def prestupna(godina):
       return True

   ====
   from unittest.gui import TestCaseGui

   class myTests(TestCaseGui):

       def testOne(self):
          self.assertEqual(prestupna(2000), True, "2000 јесте преступна")
          self.assertEqual(prestupna(1900), False, "1900 није преступна")
          self.assertEqual(prestupna(2017), False, "2017 није преступна")
          self.assertEqual(prestupna(2020), True, "2020 јесте преступна")

   myTests().main()

Предност у превозу
''''''''''''''''''

   
.. questionnote::

   Предност у превозу имају труднице, деца млађа од 7 година и старији
   од 65 година. Допуни програм који испитује да ли особа има предност
   (параметар ``godine`` садржи број година, а параметар ``trudnica``
   има вредност ``true`` ако је особа трудница, односно ``false`` у
   супротном).


.. activecode:: предност_у_превозу
   :nocodelens:
		
   def prednost(godine, trudnica)
       return True

   ====
   from unittest.gui import TestCaseGui

   class myTests(TestCaseGui):

       def testOne(self):
          self.assertEqual(prednost(34, True), True, "Трудница од 34 године има предност")
          self.assertEqual(prednost(6, False), True, "Дете од 6 година има предност")
          self.assertEqual(prednost(8, False), False, "Дете од 8 година нема предност")
          self.assertEqual(prednost(42, False), False, "Мушкарац од 42 године нема предност")
          self.assertEqual(prednost(67, False), True, "Пензионерка од 67 година има предност")

   myTests().main()

      

Број потеза краља
'''''''''''''''''

   
.. questionnote::

   Позиције на шаховској табли се обележавају, на пример, са ``a3``,
   ``b5``, ``h1`` и слично. Прво се наводи словна ознака колоне (од
   ``a`` до ``h``), а затим бројевна ознака врсте (од 1 до 8). Ако је
   дата позиција краља на шаховској табли на којој нема других фигура
   осим тог краља, напиши програм који одређује број потеза које тај
   краљ може да направи (краљ се у шаху може померити на било које
   њему суседно поље).

Постоје три различите врсте поља. Поља у угловима табле (поља ``a1``,
``a8``, ``h1`` и ``h8``) су таква да краљ може да се помери на само
три околне позиције. Поља која су на ивицама (у колонама ``a`` или
``h`` тј. у врстама ``1`` или ``8``), али нису у угловима су таква да
краљ може да се помери на пет околних позиција. Са осталих поља краљ
може да се помери на осам суседних позиција.
   
.. activecode:: краљ_број_потеза

   kralj = input("Unesi poziciju kralja:")
   kolona = kralj[0]
   vrsta  = kralj[1]
   kolona_na_ivici = kolona == "a" or kolona == "h"
   vrsta_na_ivici  = vrsta == "1" or vrsta == "8"
   if True:  # ispravi ovaj red
       broj_poteza = 3
   elif True:  # ispravi ovaj red
       broj_poteza = 5
   else:
       broj_poteza = 0   # ispravi ovaj red
   print(broj_poteza)      

Килобајт
''''''''

      
.. questionnote::

   Напиши програм који проверава да ли је корисник научио колико
   бајтова постоји у једном килобајту.


.. activecode:: бајтова_у_килобајту

   odgovor = int(input("Koliko bajtova ima u jednom kilobajtu"))
   if True:  # popravi ovaj uslov
       print("Bravo")
   else:
       print("Odgovor nije tačan")

      
.. mchoice:: бајтова_у_килобајту_2
   :answer_a: odgovor == 1000
   :answer_b: odgovor = 1000
   :answer_c: odgovor == 1024
   :answer_d: odgovor = 1024
   :correct: c
   :feedback_a: Килобајт садржи 1024 бајта.
   :feedback_b: Килобајт садржи 1024 бајта, а поређење једнакости се записује
		коришћењем ==.
   :feedback_c: Браво!
   :feedback_d: Поређење једнакости се записује коришћењем ==.

   Који од наредних услова треба употребити у претходном програму?

Жупан или краљ
''''''''''''''

      
.. questionnote::       

   Стефан Немањић је био Велики жупан од 1196 до 1217, а краљ од 1217
   до 1228. Да ли је дуже владао као краљ или Велики жупан?

.. activecode:: жупан_краљ

   zupan = 0   # ispravi ovaj red
   kralj = 0   # ispravi ovaj red
   if zupan < kralj:
   print("Дуже је био краљ.")     # ispravi ovaj red
   else:
   print("Дуже је био жупан.")    # ispravi ovaj red


Оцена на факултету
''''''''''''''''''


.. questionnote::

   На факултету се оцена одређује на основу броја поена на следећи
   начин. За 50 поена и мање добија се оцена 5, за поене од 51 до 60
   добија се оцена 6, од 61 до 70 оцена 7, од 71 до 80 оцена 8, од 81
   до 90 оцена 9 и за поене од 91 до 100 добија се оцена 10. Напиши
   програм који за дати број поена одређује оцену.

.. activecode:: оцена_на_основу_поена
		
   poeni = int(input("Unesi broj poena:"))
   
   if poeni < 51:
       ocena = 5
   elif True:      # ispravi ovaj red
       ocena = 6
   elif True:      # ispravi ovaj red
       ocena = 7
   elif poeni < 81:
       ocena = 0   # ispravi ovaj red
   elif True:      # ispravi ovaj red
       ocena = 9
   else:
       ocena = 0    # ispravi ovaj red

   print(ocena)

Рецимо и да смо овај задатак могли решити уз помоћ мало математике,
без гранања.
   
.. activecode:: оцена_на_основу_поена_без_гранања
		
   poeni = int(input("Unesi broj poena:"))
   ocena = (poeni - 1) // 10 + 1
   print(ocena)
            
Потези фигура у шаху
''''''''''''''''''''

   
.. questionnote::

   Краљ у шаху може да се помера само једно поље (на било које од
   могућих 8 суседних поља). Топ у шаху може да се помера вертикално
   или хоризонтално, било који број поља. Ловац у шаху може да се
   помера дијагонално, било који број поља. Краљица може да се помера
   хоризонтално, вертикално или дијагонално, било који број поља. Коњ
   се помера тако што иде два поља вертикално и једно поље
   хоризонтално или два поља хоризонтално и једно поље вертикално. Са
   сваку од описаних шаховских фигура дефиниши функцију која за дата
   два поља на шаховској табли (одређена својим координатама) одређује
   да ли фигура на празној табли може да стигне са првог на друго
   поље.

Први услов је да полазно поље мора бити различито од долазног. Ако су
дата поља са координатама ``(x1, y1)`` и ``(x2, y2)``, овај се услов
просто може проверити помоћу ``(x1, y1) != (x2, y2)``. Други начин не
користи парове и захтева да је бар једна од две координате различита
тј. да важи ``x1 != x2 or y1 != y2``.

Већина провера се може засновати на анализи хоризонталног и
вертикалног растојања између два поља. Када смо разматрали апсолутну
вредност рекли смо да се растојање између два броја може једноставно
израчунати као апсолутна вредност њихове разлике. Тако, , хоризонтално
растојање можемо одредити помоћу ``abs(x1 - x2)``, док вертикално
растојање можемо одредити помоћу ``abs(y1 - y2)``.

- Краљ се може померити ако је веће од ова два растојања једнако тачно
  1 (тада је растојање по једној координати 1, а по другој 0 или 1,
  што је тачно услов померања краља).
- Топ се може померити ако полазно и долазно поље имају исту
  координату ``x`` или исту координату ``y`` (обе координате не смеју
  бити једнаке јер би тада полазно и долазно поље било исто).
- Ловац се може померити ако два поља леже на истој дијагонали. Овај
  се критеријум може проверити тако што се утврди да је хоризонтално
  растојање између два поља једнако њиховом вертикалном растојању (у
  сваком дијагоналном кораку се та растојања умањују за 1, све док се
  не стигне до долазног поља када оба та растојања истовремено постају
  нула, што значи да су у почетку морала бити једнака).
- Проверу за краљицу можеш извршити тако што ћеш искомбиновати две већ
  направљене провере (ону за топа и ловца).
- На крају, проверу за коња можеш извршити тако што ћеш проверити да
  ли је хоризонтално растојање једнако 2, а вертикално 1 или је
  хоризонтално растојање једнако 1, а вертикално 2.

Имајући претходну анализу у виду, покушај да дефинишеш функције које
проверавају доступност поља. Када покренеш програм видећеш све потезе
које свака од фигура може да направи са датог поља, на основу чега ћеш
видети да ли је твоје решење исправно.

.. activecode:: шаховске_фигуре

   def kralj(x1, y1, x2, y2):
       return False

   def top(x1, y1, x2, y2):
       return False

   def lovac(x1, y1, x2, y2):
       return False

   def kraljica(x1, y1, x2, y2):
       return False

   def konj(x1, y1, x2, y2):
       return False

   polje = (3, 5)

   ====
   def ispisi_dostupna_polja(polje, naziv_figure, figura_provera):
       for x in range(1, 8+1):
	  for y in range(1, 8+1):
	     if (figura_provera(polje[0], polje[1], x, y)):
	        print(naziv_figure, x, y)

   ispisi_dostupna_polja(polje, 'kralj:', kralj)
   ispisi_dostupna_polja(polje, 'top:', top)
   ispisi_dostupna_polja(polje, 'lovac:', lovac)
   ispisi_dostupna_polja(polje, 'kraljica:', kraljica)
   ispisi_dostupna_polja(polje, 'konj:', konj)


.. reveal:: терен_тест_решење11
   :showtitle: Прикажи решење
   :hidetitle: Сакриј решење
   
   .. activecode:: шаховске_фигуре_решење

      def kralj(x1, y1, x2, y2):
          return max(abs(x1-x2), abs(y1-y2)) == 1

      def top(x1, y1, x2, y2):
          return (x1 == x2 or y1 == y2) and (x1, y1) != (x2, y2)

      def lovac(x1, y1, x2, y2):
          return abs(x1 - x2) == abs(y1 - y2) and (x1, y1) != (x2, y2)

      def kraljica(x1, y1, x2, y2):
          return top(x1, y1, x2, y2) or lovac(x1, y1, x2, y2)

      def konj(x1, y1, x2, y2):
          return ((abs(x1 - x2) == 2 and abs(y1 - y2) == 1) or \
                  (abs(x1 - x2) == 1 and abs(y1 - y2) == 2)) and \
	         (x1, y1) != (x2, y2)

      polje = (3, 5)
   
      ====
      def ispisi_dostupna_polja(polje, naziv_figure, figura_provera):
        for x in range(1, 8+1):
    	  for y in range(1, 8+1):
    	     if (figura_provera(polje[0], polje[1], x, y)):
    	        print(naziv_figure, x, y)
    
      ispisi_dostupna_polja(polje, 'kralj:', kralj)
      ispisi_dostupna_polja(polje, 'top:', top)
      ispisi_dostupna_polja(polje, 'lovac:', lovac)
      ispisi_dostupna_polja(polje, 'kraljica:', kraljica)
      ispisi_dostupna_polja(polje, 'konj:', konj)
	      