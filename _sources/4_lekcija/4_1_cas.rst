4.1. Наредбе корњаче
####################

Упознајмо се начином рада
-----------------------------

Веома леп начин да цртамо куцањем наредби у програму је корњача-графика. 
У њој се мала корњача креће по екрану и за собом оставља линију у некој боји 
као траг. Заправо корњача је један од ликова које можемо упослити да цртају 
(ако не изаберемо лика програм ће цртати помоћу стрелице). 
За разлику од робота Карел, који ради само на порталу "Петља" и којег смо 
испрограмирали специјално за вас, корњача графика је саставни део језика Python и 
програме са корњачом можете писати и на свом рачунару, ван портала 
"Петља" (на пример у програму IDLE). Потребно је само да на свом
рачунару инсталирате Python 3, чију инсталацију можете преузети са сајта `Python.org <https://www.python.org/>`_ . 
Када сте инсталирали Пајтон, покрените IDLE и идите 
на **File** а затим на **New file**. На овом месту куцате свој програм.
Када сте завршили покрените га на **Run** а затим кликните на **Run Мodule**.
Дајте име вашем програму и сачувајте га, а затим гледајте како црта! 

Наредбе корњаче
---------------

Да бисмо у нашим програмима могли користити цртање уз помоћ корњаче,
потребно је прво да укључимо библиотеку за рад са корњачом (то се ради
тако што наведемо ``import turtle``). Након тога можемо издавати
наредбе нашој корњачи. Свака наредба ће почињати са ``turtle.???``.
Кроз неколико једноставних програма прикажимо основне наредбе корњаче.

Цртање линије
'''''''''''''

- Корњача се на почетку налази у центру екрана и окренута је надесно
  (у смеру истока).

- Наредбом ``turtle.forward(100)`` корњачи говоримо да се помери
  напред (у смеру у ком је тренутно окренута) 100 корака и тако, пошто
  наша корњача подразумевано са собом носи оловку којом црта,
  постижемо да се на екрану нацрта дуж дужине 100 пиксела.

.. activecode:: корњача_forward
   :nocodelens:

   import turtle
   turtle.forward(100)

- Да бисмо видели јасније како корњача ради, можемо јој променити
  брзину кретања. ``turtle.speed(0)`` нам даје најбржу корњачу (након
  покретања програма се одмах види готов цртеж), док
  ``turtle.speed(1)`` даје најспорију корњачу (могуће је навести и
  било коју целобројну вредност између 0 и 10).

.. activecode:: корњача_forward_speed
   :nocodelens:

   import turtle
   turtle.speed(10)
   turtle.forward(100)

- Осим померања напред, корњача може да се креће и уназад, цртајући
  при том линију. Наредба којом се то постиже је ``turtle.backward``.

.. activecode:: корњача_backward
   :nocodelens:

   import turtle
   turtle.backward(100)

   
Боја и дебљина линије
'''''''''''''''''''''
   
Могуће је поставити различите параметре који одређују начин на који се
врши исцртавање.

- Да бисмо видели нашу корњачу (уместо стрелице која се подразумевано
  приказује) можемо употребити наредбу
  ``turtle.shape("turtle")``.
- Помоћу ``turtle.color`` можемо променити боју корњаче и њене оловке
  (и тако променити и боју трага тј. линија које се цртају). Као
  параметар ове наредбе у заградама под наводницима наводимо име
  жељене боје на енглеском језику. На пример, наредба
  ``turtle.color("red")`` поставља црвену боју.
- Помоћу ``turtle.width`` постављамо дебљину трага који корњача
  оставља, при чему се дебљина задаје као параметар. На пример,
  наредбом ``turtle.width(5)`` постижемо да линије које се цртају буду
  дебеле 5 пиксела.

Да ли можеш да погодиш шта ће се добити покретањем наредног програма?
Пробај да погодиш, а онда након тога покрени програм и провери да ли
си био/била у праву.
   
.. activecode:: корњача_setparams
   :nocodelens:

   import turtle
   turtle.speed(5)
   turtle.shape("turtle")
   turtle.width(5)
   turtle.color("red")
   turtle.forward(50)
   turtle.color("green")
   turtle.forward(50)

Подизање оловке
'''''''''''''''
   
Корњача током свог кретања оставља траг. Међутим, некада је згодно да
корњачу померимо без цртањa.

- Наредбом ``turtle.penup()`` корњача подиже своју оловку и након тога
  се креће по екрану не остављајући траг све док јој се не изда
  наредба ``turtle.pendown()``, након чега поново почиње да оставља
  траг током кретања.

Допуни наредни програм тако да корњача нацрта испрекидану линију која
се састоји од три дужи.

.. activecode:: корњача_оловка
   :nocodelens:

   import turtle
   turtle.speed(10)
   turtle.forward(20)        # idi napred 20 piksela (olovka je podrazumevano spuštena)
   turtle.penup()            # podigni olovku
   turtle.forward(20)        # idi napred (pošto je olovka podignuta, kornjača ne ostavlja trag)
   turtle.pendown()          # spusti olovku
   turtle.forward(20)        # idi napred 20 piksela
   
Отисци корњаче
''''''''''''''
   
- Наредбом ``turtle.stamp()`` корњача може да остави свој отисак на
  месту на ком се тренутно налази.

Покушај да погодиш који ће се облик добити покретањем наредног
програма.

.. activecode:: корњача_stamp
   :nocodelens:

   import turtle
   turtle.speed(10)
   turtle.penup()          # podigni olovku
   turtle.stamp()          # ostavi trag
   turtle.forward(20)      # idi napred 20 koraka
   turtle.stamp()          # ostavi trag
   turtle.forward(20)      # idi napred 20 koraka
   turtle.stamp()          # ostavi trag

Окретање корњаче
''''''''''''''''
   
- Корњача може мењати свој смер кретања тако што се окреће налево (у
  смеру супротном смеру кретања казаљке на сату) или надесно (у смеру
  кретања казаљке) за одређени број степени, за шта се користе наредбе
  ``turtle.left(n)`` и ``turtle.right(n)`` где је ``n`` број степени.

Покушај да погодиш који ће се облик добити покретањем наредног
програма.

.. activecode:: корњача_rotate
   :nocodelens:

   import turtle
   turtle.speed(10)
   turtle.forward(50)    # idi napred 50 koraka
   turtle.left(60)       # okreni se levo 60 stepeni
   turtle.forward(50)    # idi napred 50 koraka
   turtle.right(60)      # okreni se desno 60 stepeni
   turtle.forward(50)


Резимирајмо све наредбе корњачи које смо до сада поменули.
   
======================  ==========================================================================
``turtle.forward(n)``   корњача се помера напред за ``n`` корака, где је ``n`` неки цео број
``turtle.backward(n)``  корњача се помера назад за ``n`` корака, где је ``n`` неки цео број
``turtle.left(n)``      корњача се окреће налево за ``n`` степени, где је ``n`` неки цео број
``turtle.right(n)``     корњача се окреће надесно за ``n`` степени, где је ``n`` неки цео број
``turtle.penup()``      корњача подиже оловку
``turtle.pendown()``    корњача спушта оловку
``turtle.color(c)``     боја оловке се поставља на боју ``c``,
                        (назив боје је на енглеском језику, нпр. уместо ``c`` може се ставити ``"green"``)
``turtle.width(n)``     дебљина оловке у тачкицама (пикселима) се поставља на вредност ``n``, где је ``n`` неки цео број
``turtle.stamp()``      корњача оставља свој отисак
``turtle.shape(s)``     корњача мења свој облик (нпр. уместо ``s`` може се ставити  ``"turtle"``)
``turtle.speed(n)``     корњача мења своју брзину кретања ``n`` од 0 (најбрже) до 10 (најспорије)
======================  ==========================================================================

Комплетан списак свих наредби корњаче може се наћи у `званичној
документацији <https://docs.python.org/3/library/turtle.html>`_ језика
Python 3.

Скраћени запис
--------------

Постоји начин да се наредбе запишу краће. Ако се уместо ``import
turtle`` библиотека за рад са корњачом увезе помоћу ``import turtle as
t``, тада уместо ``turtle.???`` можемо писати само ``t.???``. На
пример, уместо ``turtle.color("red")`` можемо писати само
``t.color("red")``. Додатно, неке наредбе имају скраћени облик.  На
пример, померање напред ``n`` пиксела можемо постићи помоћу
``t.fd(n)``, померање назад помоћу ``t.bk()``, окрет налево за ``n``
степени помоћу ``t.lt(n)``, надесно помоћу ``t.rt(n)`` и слично.

На пример, цртеж можемо нацртати и наследећи начин.

.. activecode:: корњача_скраћени_запис

   import turtle as t
   t.color("red")
   t.fd(100)
   t.lt(90)
   t.fd(150)

