9.2. Реално и целобројно дељење
###############################


Хајде да заједно погледамо шта је то реално, а шта целобројно дељење, погледај наредни видео:

.. ytpopup:: wl2wvHeB0pQ
    :width: 735
    :height: 415
    :align: center


Реално дељење
-------------

У наставку ћемо се посветити операцији дељења. У већини програмских
језика разликују се два облика дељења: **реално** и
**целобројно**. Резултат (количник) реалног дељења је реалан број (на
пример, када се 13 реално дели са 4, добија се количник 3,25), док је
код целобројног дељења количник увек цео број, при чему је могуће да
постоји и целобројни остатак (на пример, када се 13 целобројно дели са
4, добија се количник 3 и остатак 1).

Реалним дељењем се могу делити и реални и цели бројеви, а резултат је
реалан број. На пример, ако се користи реално дељење тада је *7,5 :
2,5* једнако *3* док је *5 : 2* једнако *2,5*. Реално дељење се у
језику Python3 обележава знаком ``/``. Тако је вредност израза ``7.5 /
2.5`` једнака ``3.0``.

Провери своје знање наредним питањем.

.. fillintheblank:: fill_проценат

      Вредност израза ``4.5 / 5`` је |blank|
      
      - :0.9: Tачно
        :0,9: Тачно, али уместо децималног зареза треба ставити децималну тачку
        :.*: Нетачно

Посматрајмо наредни једноставан задатак у којем ћемо употребити реално
дељење.

Просек скокова у даљ
''''''''''''''''''''
.. level:: 1
	   
.. questionnote::

  Скакач у даљ је у квалификацијама у првој серији скочио 8,12, у
  другој 8,23, а у трећој 8,17 метара. Колико је износио његов
  просечни скок?

  
Просек (каже се и аритметичка средина) неколико бројева једнак је
количнику њиховог збира и њиховог броја. Са просеком сте се сигурно
већ срели када сте рачунали просек својих оцена. Дакле, да бисмо решили
овај задатак потребно је сабрати дужине сва три скока и поделити са
три.

.. activecode:: Просек_скокова

  skok1 = 8.12
  skok2 = 8.23
  skok3 = 8.17
  prosek = (skok1 + skok2 + skok3) / 3
  print(prosek)

Сложени израз из збирке из математике
'''''''''''''''''''''''''''''''''''''
.. level:: 1

.. questionnote::

   У једној збирици из математике за шести разред јавља се задатак у
   коме се тражи да се израчуна вредност израза 1 + (3 - (-4)) : 2 +
   0,7. Израчунај ту вредност у Python-у.

   
.. activecode:: Сложени_израз_са_дељењем

  print(1 + (3 - (-4)) / 2 + 0.7)


.. questionnote::

   Израчунај вредност израза :math:`7 + \frac{4 - (-5)}{(-3) \cdot 2 -
   7}` у Python-у.

.. activecode:: Сложени_израз_са_дељењем_1

  print()  # popravi ovaj red

Ако урадиш све како треба, добићеш резултат ``6.3076923076923075``.
   

Полице са књигама
'''''''''''''''''
.. level:: 1

.. questionnote::

   На првој полици има 150 књига. На другој има дупло мање него на
   првој, а на трећој три пута мање него на другој. Колико је укупно
   књига на полицама.

.. activecode:: Полице_са_књигама

  polica1 = 150
  polica2 = polica1 / 2
  polica3 = polica2 / 3
  ukupno = polica1 + polica2 + polica3
  print(ukupno)

Приметимо да се као резултат добија број ``250.0`` уместо ``250``. То
је због тога што се након примене операције реалног дељења (операције
``/``) добије увек резултат у облику реалног броја. Пошто је број
књига цео број и пошто је број 150 дељив и са 2, а број 75 са 3 (иначе
задатак не би имао смисла) на овом месту је било могуће употребити и
операцију целобројног дељења о којој ће више речи бити у наставку.
  

  
Целобројно дељење
-----------------
  
Целобројно дељење обично подразумева дељење целих бројева и као
резултат се одређују целобројни количник и остатак при дељењу. На
пример, ако се целобројно деле бројеви *14* и *3* тада се добија
целобројни количник *4* и остатак *2*.

.. level:: 2
   :container:
      
   У општем случају, целобројни количник и остатак при дељењу бројева
   :math:`a` и :math:`b` су бројеви :math:`q` и :math:`r` такви да је
   :math:`a = q \cdot b + r` и :math:`0 \leq r < b`. Приметимо да ова
   веза важи у примеру дељења :math:`14` и :math:`3` важи управо ова
   веза тј. важи да је :math:`14 = 4 \cdot 3 + 2`, при чему је
   :math:`0 \leq 2 < 3`. Други услов каже да остатак мора бити мањи од
   делиоца тј. да количник мора бити што је могуће већи. Тај услов је
   веома важан (на пример, важи да је :math:`14 = 3 \cdot 3 + 5`,
   међутим, нећемо рећи да је целобројни количник :math:`3` а остатак
   :math:`5` јер број :math:`5` није мањи од делиоца).

Кроз наредно питање провери колико разумеш операције целобројног
дељења и остатка при дељењу.

.. fillintheblank:: fill1412
		    
    При дељењу бројева 13 и 5 целобројни количник је |blank| а остатак је |blank|

    - :2: Тачно
      :x: Важи да је 13 = 2 · 5 + 3
    - :3: Тачно
      :x: Важи да је 13 = 2 · 5 + 3

У језику Python3 операција **целобројног дељења** се означава са
``//``, а операција израчунавања **остатка при дељењу** се означава са
``%``.

.. infonote::

   У математици се знак % користи да означи проценат (стоти део
   нечега). Коришћење истог знака за остатак при дељењу је заправо
   несрећна околност и треба бити обазрив да се та два заправо
   неповезана појма случајно не помешају.


Дакле, оператором ``/`` се израчунава реални, оператором ``//``
целобројни количник, а оператором ``%`` остатак при дељењу. Провери колико
ово разумеш.

.. dragndrop:: дељење
    :feedback: Покушај поново
    :match_1: 27 / 10|||2.7
    :match_2: 27 // 10|||2
    :match_3: 27 % 10|||7

    Превлачењем упари изразе са њиховим вредностима.

.. dragndrop:: дељење1
    :feedback: Покушај поново
    :match_1: 43 / 8|||5.375
    :match_2: 43 // 8|||5
    :match_3: 43 % 8|||3
    
    Упари изразе са њиховим вредностима.

Покажимо једноставну примену израчунавања целобројног количника и остатка
на следећем задатку.

Подела чоколадних бананица
''''''''''''''''''''''''''
.. level:: 1

.. questionnote::

   У школи се организује новогодишња приредба за децу. Од пара које су
   зарадили тако што су организовали сајам својих рукотворина купили
   су неколико крем бананица које желе да равномерно поделе свој деци
   (тако да свако дете добије исти број бананица). Ако се зна колико
   ће деце доћи на приредбу, колико ће свако дете добити бананица, a
   колико ће бананица остати нерасподељено?


.. activecode:: чоколадне_бананице

   broj_dece = int(input("Koliko će dece doći na priredbu: "))
   ukupno_bananica = int(input("Koliko ukupno ima bananica: "))
   bananica_po_detetu = ukupno_bananica // broj_dece
   ostalo_bananica = ukupno_bananica % broj_dece
   print("Svako će dete dobiti", bananica_po_detetu, "bananica.")
   print("Ostaće", ostalo_bananica, "bananica.")

Приметимо и да смо број преосталих бананица могли израчунати и тако
што од укупног броја бананица одузмемо број бананица које су подељене
деци (а то је производ броја деце и броја бананица које је свако дете
добило) тј. помоћу израза ``ukupno_bananica - broj_dece *
bananica_po_detetu``. Ипак, коришћење оператора ``%`` којим се
израчунава остатак је једноставније решење.

Ево једног сличног задатка, за вежбу.

Разломак у мешовити број
''''''''''''''''''''''''
.. level:: 1

.. questionnote:: 

   Бројилац разломка је 37, а именилац је 12. Преведи овај разломак у
   мешовит број.

Важи да је :math:`37 = 3 \cdot 12 + 1`, па је :math:`\frac{37}{12} =
\frac{3 \cdot 12 + 1}{12} = 3 \frac{1}{12}`. У општем случају када
разломак :math:`\frac{a}{b}` преводимо у мешовит број потребно је да
бројилац напишемо у облику :math:`a = q \cdot b + r`, при чему мора да
важи да је :math:`0 \leq r < b` и тада се добија межовити број
:math:`q \frac{r}{b}`. Број :math:`q` је целобројни количник бројева
:math:`a` и :math:`b`, док је :math:`r` остатак при њиховом дељењу.

.. activecode:: Мешовит_број

   brojilac = 37
   imenilac = 12
   mesoviti_ceo_deo = 0  # ispravi ovaj red
   mesoviti_brojilac = 0 # ispravi ovaj red
   mesoviti_imenilac = 0 # ispravi ovaj red
   print(mesoviti_ceo_deo, "celih i", mesoviti_brojilac, "/", mesoviti_imenilac)

Наравно, резултат треба да буде ``3 celih i 1 / 12``.
      
.. reveal:: пресек_решење31
   :showtitle: Прикажи решење
   :hidetitle: Сакриј решење
      
   .. activecode:: Мешовит_број_решење

      brojilac = 37
      imenilac = 12
      mesoviti_ceo_deo = brojilac // imenilac
      mesoviti_brojilac = brojilac % imenilac
      mesoviti_imenilac = imenilac
      print(mesoviti_ceo_deo, "celih i", mesoviti_brojilac, "/", mesoviti_imenilac)


Целобројно дељење - конверзија јединица
---------------------------------------


Целобројни количник и остатак често користимо када желимо да
прерачунавамо јединице. Размотримо следећих неколико задатака.

Конверзија центиметара у метре и центиметре
'''''''''''''''''''''''''''''''''''''''''''
.. level:: 1

.. questionnote::

   Напиши програм који на основу дате дужине у центиметрима израчунава
   исту дужину у метрима и центиметрима. На пример, ако је дужина 178
   центиметара, програм израчунава да је то 1 метар и 78 центиметара.

Пошто у једном метру има 100 центиметара, задатак се своди на
израчунавање целобројног количника и остатка при дељењу
са 100. Заиста, ако имамо :math:`m` метара и :math:`c` центиметара,
тада је укупан број центиметара једнак :math:`m\cdot 100 + c`, при
чему је :math:`0 \leq c < 100`.

.. activecode:: центиметри_у_метре_и_центиметре

  ukupno_centimetara = int(input("Unesi dužinu u centimetrima: "))
  metara = ukupno_centimetara // 100
  centimetara = ukupno_centimetara % 100
  print("Dužina je", metara, "m", centimetara, "cm")

Рецимо поново да је често решење до којег ученици самостално долазе и
оно у којем се преостали број центиметара рачуна као ``centimetara =
ukupno_centimetara - metara * 100``. Иако је ово решење исправно, на
располагању нам је оператор израчунавања остатака ``%`` и требало би
да се навикнемо да га користимо.


Целобројно дељење - позициони запис броја
-----------------------------------------

Ако је укупан број центиметара био 123, тада је број метара 1, број
дециметара 2 и број центиметара 3. Решавањем претходног задатка смо
заправо одређивали појединачне цифре коришћене у запису тог
троцифреног броја. Приказана техника може бити уопштена тако да се
одређују све цифре и у запису дужих бројева.


Цифре броја
'''''''''''
.. level:: 2

.. questionnote::

   Чест начин откривања грешака при слању података је да се уз податке
   које треба послати, пошаљу и одређени контролни подаци, израчунати
   на основу самих података. Када прималац прими податке, он на основу
   примљених података поново израчунава контролне податке и упоређује
   их са контролним подацима које је примио. Ако се приликом преноса
   података, услед неких сметњи, подаци случајно измене, прималац ће
   то приметити тако што ће видети да се контролни подаци које је он
   израчунао неће поклопити са онима које је примио. Сви подаци се у
   рачунарима представљају помоћу бројева, а још од најранијег доба
   рачунарства као метода контроле коришћен је збир цифара. На пример,
   ако би податак који се шаље био број 12345, онда би се уз њега слао
   и контролни број 15 (збир 1 + 2 + 3 + 4 + 5). Ако би приликом слања
   нека цифра била случајно промењена (на пример, ако би прималац
   грешком примио број 12335) тада би се и контролни број
   највероватније разликовао (контролни број би у нашем примеру био
   14). Напиши програм који за дати петоцифрени број одређује његов
   контролни број (збир његових цифара).

.. activecode:: цифре_броја
   :runortest: broj, kontrolni_broj
   :enablecopy:
		
   # -*- acsection: general-init -*-
   # -*- acsection: var-init -*-
   broj = 12345
   # -*- acsection: main -*-
   c0 = (broj // 1) % 10
   c1 = (broj // 10) % 10
   c2 = 0 # ispravi ovaj red
   c3 = (broj // 1000) % 10
   c4 = 0 # ispravi ovaj red
   kontrolni_broj = c0 + c1 + c2 + c3 + c4
   # -*- acsection: after-main -*-
   print(kontrolni_broj)
   ====
   from unittest.gui import TestCaseGui
   class myTests(TestCaseGui):
       def testOne(self):
          for broj, kontrolni_broj in [(71425, 19), (33214, 13), (62040, 12)]:
             self.assertEqual(acMainSection(broj = broj)["kontrolni_broj"],kontrolni_broj,"За број %s контролни број је %s." % (broj, kontrolni_broj))
   myTests().main()
   

Приметимо да смо цифре броја одређивали веома слично као у претходном
задатку.  Цифре одређујемо сдесна налево, тако што делимо број са
тежином цифре (за цифру јединица број делимо са 1, десетица са 10,
стотина са 100 итд.) и проналазимо остатак при дељењу са 10.

.. infonote::

   Људи су контролу података примењивали и ручно, а сада рачунари
   обављају такве контроле у овиру прецизно задатих поступака –
   *протокола за размену података*. Иако је контролни збир
   најједноставнији начин контроле, он не може да открије грешке до
   којих може доћи услед случајне размене редоследа цифара (на пример,
   ако се уместо броја 12345 грешком пошаље број 12435, контролни збир
   оба броја ће бити исти и грешка неће бити примећена). Зато се
   уместо збира понекад користе изрази облика :math:`c_0 + 2c_1 +
   3c_2 + 4c_3 + 5c_4`. Покушај да измениш претходни програм тако да
   израчунава контролни број на овај начин.


Целобројно дељење - време и углови
----------------------------------

За разлику од бројева и јединица мере које записујемо у систему чија
је основа 10, при раду са временом и угловима користимо систем чија је
основа број 60. Тако један сат има 60 минута, а један минут 60
секунди. Слично један степен има 60 угаоних минута, а један угаони
минут има 60 угаоних секунди. Прикажимо сада кроз неколико задатака
како можемо у програмима вршити израчунавања у којима учествују време
и углови.

Конверзија сати и минута у минуте и обратно
'''''''''''''''''''''''''''''''''''''''''''
.. level:: 1

.. questionnote::

   Ако се зна колико је тренутно сати и минута, израчунај колико је
   минута протекло од претходне поноћи.

Пошто у једном сату има 60 минута, довољно је да помоножиш број сати
са 60 и на то да додаш број минута.

.. activecode:: сати_и_минути_у_минуте
   :runortest: sati, minuta, minuta_od_ponoci
   :enablecopy:

   # -*- acsection: general-init -*-
   # -*- acsection: var-init -*-
   sati = 2
   minuta = 60
   # -*- acsection: main -*-
   minuta_od_ponoci = 0 # ispravi ovaj red
   # -*- acsection: after-main -*-
   print(minuta_od_ponoci)
   ====
   from unittest.gui import TestCaseGui
   class myTests(TestCaseGui):
       def testOne(self):
          for sati, minuta, minuta_od_ponoci in [(14, 19, 859), (11, 13, 673), (23, 59, 1439)]:
             self.assertEqual(acMainSection(sati = sati, minuta = minuta)["minuta_od_ponoci"],minuta_od_ponoci,"У %s:%s протекло је %s минута од поноћи." % (sati, minuta, minuta_od_ponoci))
   myTests().main()
   
   
.. questionnote::

   Ако се зна колико је минута протекло од претходне поноћи, израчунај
   колико је тренутно сати и минута.

Ако са :math:`s` обележимо тренутни број сати, са :math:`m` тренутни
број минута, а са :math:`M` број минута протеклих од поноћи, тада важи
да је :math:`M = s \cdot 60 + m`, при чему за :math:`m` важи да је
број између :math:`0` и :math:`59`, што јасно указује на то да се
тражене вредности могу израчунати применом целобројног дељења.
   
.. activecode:: минути_у_сате_и_минуте
   :runortest: minuta_od_ponoci, sati, minuta
   :enablecopy:

   # -*- acsection: general-init -*-
   # -*- acsection: var-init -*-
   minuta_od_ponoci = 125
   # -*- acsection: main -*-
   sati = 0     # ispravi ovaj red
   minuta = 0   # ispravi ovaj red
   # -*- acsection: after-main -*-
   print(sati, minuta)
   ====
   from unittest.gui import TestCaseGui
   class myTests(TestCaseGui):
       def testOne(self):
          for sati, minuta, minuta_od_ponoci in [(14, 19, 859), (11, 13, 673), (23, 59, 1439)]:
             self.assertEqual(acMainSection(minuta_od_ponoci = minuta_od_ponoci)["sati"],sati,"У %s:%s протекло је %s минута од поноћи." % (sati, minuta, minuta_od_ponoci))
             self.assertEqual(acMainSection(minuta_od_ponoci = minuta_od_ponoci)["minuta"],minuta,"У %s:%s протекло је %s минута од поноћи." % (sati, minuta, minuta_od_ponoci))
   myTests().main()

