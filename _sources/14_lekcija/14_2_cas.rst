14.2. Скупови и речници
#######################

Скупови
-------

Ако знамо имена свих фудбалера који су давали голове током једне
ревијалне утакмице и то редом, како су давали голове можемо
једноставно одредити скуп свих фудбалера који су се уписали у листу
стрелаца. Наиме, ако формирамо скуп на основу имена стрелаца
аутоматски ће бити уклоњени дупликати.

.. activecode:: скуп
		
   strelci = {"Mesi", "Ronaldo", "Mesi", "Ibrahimović", "Ibrahimović", "Nejmar", "Nejmar"}
   print(strelci)

Скуп дефинишемо тако што између витичастих заграда (заграда ``{`` и
``}``) наводимо елементе раздвојене зарезима. Елементи скупа у овом
примеру су биле ниске, а можемо разматрати и скупове елемената другог
типа (на пример, скупове бројева).

Скуп од торке/листе/ниске
&&&&&&&&&&&&&&&&&&&&&&&&&

Ако су елементи скупа чланови неке торке или листе, можемо лако добити
скуп свих елемената (коришћењем функције ``set`` као у следећем
програму).

.. activecode:: скуп_од_листе
		
   golovi = ["Mesi", "Ronaldo", "Mesi", "Ibrahimović", "Ibrahimović", "Nejmar", "Nejmar"]
   strelci = set(golovi)
   print(strelci)

И од ниске можемо једноставно добити скуп карактера које она садржи
(опет помоћу функције ``set``).

Провера припадности скупу
&&&&&&&&&&&&&&&&&&&&&&&&&

Слично као и код осталих структура података, провера припадности скупу
може се извршити оператором ``in``. Покушај да то примениш у наредном
задатку.

Да ли је Миодраг награђен?
''''''''''''''''''''''''''

.. questionnote:: 

   Познат је скуп награђених ученика. Напиши програм који проверава да
   ли је Миодраг освојио награду.

.. activecode:: члан_скупа_награђених

   nagradjeni = {"Lenka", "Sofija", "Dimitrije"} 
   if "Miodrag" ???:
       print("Bravo!")
   else:                       
       print("Nažalost, Miodrag nije među nagrađenima.")


Скуповне операције
&&&&&&&&&&&&&&&&&&

У језику Python можемо веома једноставно израчунати **унију**,
**пресек** и **разлику** скупова. Ако су ``A`` и ``B`` скупови, онда
је ``A | B`` њихова унија, ``A & B`` њихов пресек, а ``A - B`` њихова
разлика. Провери да ли се сећаш ових операција из математике тако што
ћеш решити наредни тест.


.. dragndrop:: identifier
    :match_1: A & B|||{3}
    :match_2: A | B|||{3, 4, 5, 6, 7}
    :match_3: A - B|||{6, 7}
    :match_4: B - A|||{4, 5}
    :match_5: (A - B) | (B - A)|||{4, 5, 6, 7}

    Ако је A = {3, 6, 7}, а B = {3, 4, 5}, повежи скуповне
    операције са њиховим резултатима.


Прикажимо како се скуповне операције могу употребити у решењу наредног
задатка.

Девојчице које тренирају два спорта
'''''''''''''''''''''''''''''''''''

.. questionnote::

  Један скуп садржи девојчице из одељења које тренирају ритмичку
  гимнастику, а други оне које тренирају одбојку. Одреди скуп
  девојчица које тренирају оба спорта, скуп девојчица које тренирају
  бар један од њих и скуп девојчица које тренирају само одбојку.

.. activecode:: скупови_спортисткиња  

   ritmicka = {"Ana", "Milica", "Jovana", "Gordana"}
   odbojka = {"Tara", "Nađa", "Milica", "Jovana", "Aleksandra"}
   dva_sporta = ritmicka ??? odbojka       # upiši odgovarajući operator
   bar_jedan_sport = ritmicka ??? odbojka  # upiši odgovarajući operator
   samo_odbojka = odbojka ??? ritmicka     # upiši odgovarajući operator
   print(dva_sporta)
   print(bar_jedan_sport)
   print(samo_odbojka)

Ако све урадиш како треба, добићеш решење

::

   {'Milica', 'Jovana'}
   {'Ana', 'Milica', 'Jovana', 'Gordana', 'Tara', 'Nađa', 'Aleksandra'}
   {'Tara', 'Nađa', 'Aleksandra'}   


Речници
-------

Листе нам дају могућност да организујемо податке за које је познат
неки редослед и у којима сваки податак има свој редни број (на пример,
листу смо употребили да организујемо имена путника у авиону или
податке о месецима у години) и приступ елементима листе врши се на
основу њиховог индекса (редног броја, тј. позиције). Међутим, често
подаци представљају неко пресликавање у којем на основу датог *кључа*
желимо да приступимо *вредности* која је придружена том кључу. На
пример, на основу шифре производа приступамо његовој цени, на основу
ЈМБГ грађана приступамо његовом имену, на основу броја банковног
рачуна приступамо салду (износу новца) на том рачуну и слично. У тим
ситуацијама уместо листе много је боље користити **речнике** (каже се
и мапе или асоцијативне низове).

Дефинисање и коришћење речника
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Цене аутомобила
'''''''''''''''

.. questionnote::

   Аутомобили у каталогу имају придружене цене и ми желимо да у нашем
   програму можемо да одредимо цену аутомобила на основу његовог
   модела. Напиши програм који на основу унетог модела аутомобила
   (ниска) одређује његову цену (цео број).

Кључна одлука за ефикасно решење овог задатка је да каталог цена
аутомобила представимо помоћу речника.

.. activecode:: цене_аутомобила
		
   cene_automobila = {"fiat 500l": 11990, 
                      "renault clio": 9650, 
                      "toyota corolla": 13990}
   automobil = input("Unesi model automobila:")
   print(cene_automobila[automobil])

У претходном примеру модели аутомобила су кључеви који се пресликавају
у цене аутомобила које су вредности. Кључеви су биле ниске, а
вредности цели бројеви, што је чест случај.


Географске координате градова
'''''''''''''''''''''''''''''

У наредном примеру вредности у речнику су уређени парови.
	   
.. questionnote::

   Познате су географске координате неколико главних европских
   градова. За дато име града одреди њене географске
   координате. Одреди посебно географску дужину и посебно географску
   ширину.

.. activecode:: географске_координате
		
   gradovi = {"Beograd": (44.7866, 20.4489), 
              "Budimpešta": (47.4979, 19.0402),
              "Beč": (48.2082, 16.3738), 
              "Bratislava": (48.1486, 17.1077)}
   grad = input("Unesi ime grada: ")
   # ispravi naredni red tako da se iz rečnika pročitaju koordinate grada
   koordinate = ???
   print(koordinate)
   # dopuni naredni kod tako da se ispišu geografska širina i dužina
   print("Geografska širina: ")
   print("Geografska dužina: ")

Цена производа
''''''''''''''

Слично као и код осталих структура података и провера да ли је неком
кључу у речнику придружена вредност се може проверити оператором
``in``.

      
.. questionnote::

   У речнику се чувају цене различитих производа у продавници. Пронађи
   и испиши цену датог производа или пријави да се тај производ не
   продаје.

.. activecode:: припада_речнику
		
   cene = {"hleb": 39.90, "mleko": 89, "jaje": 14.90}
   proizvod = "hleb"
   if proizvod in cene:
       print(proizvod, "košta", cene[proizvod], "dinara")
   else:
       print(proizvod, "se ne prodaje u ovoj prodavnici")
