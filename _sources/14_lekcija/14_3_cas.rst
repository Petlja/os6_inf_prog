

Скупови
#######

Ако знамо имена свих фудбалера који су давали голове током једне
ревијалне утакмице и то редом, како су давали голове можемо
једноставно одредити скуп свих фудбалера који су се уписали у листу
стрелаца. Наиме, ако формирамо скуп на основу имена стрелаца
аутоматски ће бити уклоњени дупликати.

.. activecode:: скуп
		
   strelci = {"Mesi", "Ronaldo", "Mesi", "Ibrahimović", "Ibrahimović", "Nejmar", "Nejmar"}
   print(strelci)

Скуп дефинишемо тако што између витичастих заграда (заграда ``{`` и
``}``) наводимо елементе раздвојене зарезима. Елементи скупа у овом
примеру су биле ниске, а можемо разматрати и скупове елемената другог
типа (на пример, скупове бројева).

Скуп од торке/листе/ниске
&&&&&&&&&&&&&&&&&&&&&&&&&

Ако су елементи скупа чланови неке торке или листе, можемо лако добити
скуп свих елемената (коришћењем функције ``set`` као у следећем
програму).

.. activecode:: скуп_од_листе
		
   golovi = ["Mesi", "Ronaldo", "Mesi", "Ibrahimović", "Ibrahimović", "Nejmar", "Nejmar"]
   strelci = set(golovi)
   print(strelci)

И од ниске можемо једноставно добити скуп карактера које она садржи
(опет помоћу функције ``set``).

Провера припадности скупу
&&&&&&&&&&&&&&&&&&&&&&&&&

Слично као и код осталих структура података, провера припадности скупу
може се извршити оператором ``in``. Покушај да то примениш у наредном
задатку.

Да ли је Миодраг награђен?
''''''''''''''''''''''''''

.. questionnote:: 

   Познат је скуп награђених ученика. Напиши програм који проверава да
   ли је Миодраг освојио награду.

.. activecode:: члан_скупа_награђених

   nagradjeni = {"Lenka", "Sofija", "Dimitrije"} 
   if "Miodrag" ???:
       print("Bravo!")
   else:                       
       print("Nažalost, Miodrag nije među nagrađenima.")


Скуповне операције
&&&&&&&&&&&&&&&&&&

У језику Python можемо веома једноставно израчунати **унију**,
**пресек** и **разлику** скупова. Ако су ``A`` и ``B`` скупови, онда
је ``A | B`` њихова унија, ``A & B`` њихов пресек, а ``A - B`` њихова
разлика. Провери да ли се сећаш ових операција из математике тако што
ћеш решити наредни тест.


.. dragndrop:: identifier
    :match_1: A & B|||{3}
    :match_2: A | B|||{3, 4, 5, 6, 7}
    :match_3: A - B|||{6, 7}
    :match_4: B - A|||{4, 5}
    :match_5: (A - B) | (B - A)|||{4, 5, 6, 7}

    Ако је A = {3, 6, 7}, а B = {3, 4, 5}, повежи скуповне
    операције са њиховим резултатима.


Прикажимо како се скуповне операције могу употребити у решењу наредног
задатка.

Девојчице које тренирају два спорта
'''''''''''''''''''''''''''''''''''
.. level:: 1
   
.. questionnote::

  Један скуп садржи девојчице из одељења које тренирају ритмичку
  гимнастику, а други оне које тренирају одбојку. Одреди скуп
  девојчица које тренирају оба спорта, скуп девојчица које тренирају
  бар један од њих и скуп девојчица које тренирају само одбојку.

.. activecode:: скупови_спортисткиња  

   ritmicka = {"Ana", "Milica", "Jovana", "Gordana"}
   odbojka = {"Tara", "Nađa", "Milica", "Jovana", "Aleksandra"}
   dva_sporta = ritmicka ??? odbojka       # upiši odgovarajući operator
   bar_jedan_sport = ritmicka ??? odbojka  # upiši odgovarajući operator
   samo_odbojka = odbojka ??? ritmicka     # upiši odgovarajući operator
   print(dva_sporta)
   print(bar_jedan_sport)
   print(samo_odbojka)

Ако све урадиш како треба, добићеш решење

::

   {'Milica', 'Jovana'}
   {'Ana', 'Milica', 'Jovana', 'Gordana', 'Tara', 'Nađa', 'Aleksandra'}
   {'Tara', 'Nađa', 'Aleksandra'}   

