Речници
#######

Листе нам дају могућност да организујемо податке за које је познат
неки редослед и у којима сваки податак има свој редни број (на пример,
листу смо употребили да организујемо имена путника у авиону или
податке о месецима у години) и приступ елементима листе врши се на
основу њиховог индекса (редног броја, тј. позиције). Међутим, често
подаци представљају неко пресликавање у којем на основу датог *кључа*
желимо да приступимо *вредности* која је придружена том кључу. На
пример, на основу шифре производа приступамо његовој цени, на основу
ЈМБГ грађана приступамо његовом имену, на основу броја банковног
рачуна приступамо салду (износу новца) на том рачуну и слично. У тим
ситуацијама уместо листе много је боље користити **речнике** (каже се
и мапе или асоцијативне низове).

Дефинисање и коришћење речника
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Цене аутомобила
'''''''''''''''
.. level:: 1

.. questionnote::

   Аутомобили у каталогу имају придружене цене и ми желимо да у нашем
   програму можемо да одредимо цену аутомобила на основу његовог
   модела. Напиши програм који на основу унетог модела аутомобила
   (ниска) одређује његову цену (цео број).



Кључна одлука за ефикасно решење овог задатка је да каталог цена
аутомобила представимо помоћу речника.

.. activecode:: цене_аутомобила
		
   cene_automobila = {"fiat 500l": 11990, 
                      "renault clio": 9650, 
                      "toyota corolla": 13990}
   automobil = input("Unesi model automobila:")
   print(cene_automobila[automobil])

У претходном примеру модели аутомобила су кључеви који се пресликавају
у цене аутомобила које су вредности. Кључеви су биле ниске, а
вредности цели бројеви, што је чест случај.


Географске координате градова
'''''''''''''''''''''''''''''
.. level:: 2

У наредном примеру вредности у речнику су уређени парови.
	   
.. questionnote::

   Познате су географске координате неколико главних европских
   градова. За дато име града одреди њене географске
   координате. Одреди посебно географску дужину и посебно географску
   ширину.

.. activecode:: географске_координате
		
   gradovi = {"Beograd": (44.7866, 20.4489), 
              "Budimpešta": (47.4979, 19.0402),
              "Beč": (48.2082, 16.3738), 
              "Bratislava": (48.1486, 17.1077)}
   grad = input("Unesi ime grada: ")
   # ispravi naredni red tako da se iz rečnika pročitaju koordinate grada
   koordinate = ???
   print(koordinate)
   # dopuni naredni kod tako da se ispišu geografska širina i dužina
   print("Geografska širina: ")
   print("Geografska dužina: ")


Цена производа
''''''''''''''

Слично као и код осталих структура података и провера да ли је неком
кључу у речнику придружена вредност се може проверити оператором
``in``.

.. level:: 1
      
.. questionnote::

   У речнику се чувају цене различитих производа у продавници. Пронађи
   и испиши цену датог производа или пријави да се тај производ не
   продаје.

.. activecode:: припада_речнику
		
   cene = {"hleb": 39.90, "mleko": 89, "jaje": 14.90}
   proizvod = "hleb"
   if proizvod in cene:
       print(proizvod, "košta", cene[proizvod], "dinara")
   else:
       print(proizvod, "se ne prodaje u ovoj prodavnici")
   
Домаћи задатак
--------------

Ова лекција је била прилично обимна, па је могуће да нисте током часа
успели да је целу пређете. За домаћи пређи све задатке које су на часу
остали неурађени, а затим уради и наредних неколико задатака.

Задаци
&&&&&&


Да ли си награђен?
''''''''''''''''''
.. level:: 1

.. questionnote:: 

   Позната је листа награђених ученика. Напиши програм који проверава
   да ли је корисник чије се име учитава на почетку програма освојио
   награду.

.. activecode:: члан_листе_награђених

   nagradjeni = ["Lenka", "Sofija", "Dimitrije"]
   ime = ""    # ispravi ovaj red tako da se unosi ime ucenika
   if ???:     # dodaj uslov koji proverava da li se uneto ime nalazi u listi
       print("Bravo, nagrada je tvoja!")
   else:
       print("Nažalost, nisi među nagrađenima")

Путници на датим седиштима у авиону
'''''''''''''''''''''''''''''''''''
.. level:: 1

.. questionnote::

  Познат је списак имена путника у авиону. Седишта су нумерисана од 1
  па надаље. Ако стјуардеса унесе број седишта, напиши програм који
  одређује име путника на том седишту. Након тога испиши имена путника
  која седе на прва четири, као и на последња два седишта, као и број
  седишта на којем седи Мика Микић.

Да бисмо олакшали бројање, на првом месту у листи је постављен
вештачки елемент (празна ниска).
  
.. activecode:: путници_у_авиону

  putnici = ["", "Петар Петровић", "Зорана Зорановић", "Мика Микић", \
             "Јелена Јеленковић", "Ана Анић", "Милан Милановић"]
  # ispravi naredne redove tako da se ispise ime putnika na unetom broju sedista
  sediste = int(input("Unesi broj sedista:"))
  print("Na sedistu", sediste, "sedi", putnici[0])
  # ispravi naredni red tako da se ispisu imena prva 4 putnika
  print(putnici[0])
  # ispravi naredni red tako da se ispisu imena poslednja 2 putnika
  print(putnici[0])
  # ispravi naredni red tako da se ispise broj sedista na kojem sedi Мика Микић
  print(putnici[0])

Шифра
'''''
.. level:: 1
   
.. questionnote::

   Лидијина шифра за gmail се састоји од 6 слова. Одлучила је да је
   закомпликује, али на правилан начин, тако да касније може да је се
   сети. Шифру ће закомпликовати тако што ће заменити редослед прва
   два и последња два слова, а средња два слова поновити два пута. На
   пример, ако јој је шифра била lidija закомпликована шифра јој је
   jadidili. Напиши програм који исписује закомпликовану шифру.

.. activecode:: закомпликована_шифра   

   sifra = "lidija"
   zakomplikovana_sifra = sifra[4:6] + ""  # popravi ovaj red
   print(zakomplikovana_sifra)

Учитавање разломка
''''''''''''''''''
.. level:: 2
		
.. questionnote::

   Корисник уноси текст који описује разломак (на пример,
   `3/4`). Израчунај децималну вредност тог разломка.


.. activecode:: разломак

   razlomak = input("Unesi razlomak: ")
   pozicija_crte = razlomak.find("/")
   brojilac = int(0)    # popravi ovaj red
   imenilac = int(razlomak[pozicija_crte+1:])
   print(0)   # popravi ovaj red

Сугласници
''''''''''
.. level:: 1

.. questionnote::
   
   Сугласници се по месту изговора могу бити предњонепчани (Ј, Љ, Њ, Ћ,
   Ђ, Ш, Ж, Ч, Џ) и задњонепчани К, Г, Х. По звучности, сугласници се
   деле на звучне (Б, Г, Д, Ђ, Ж, З, Џ), безвучне (П, К, Т, Ћ, Ш, С, Ч,
   Ф, Х, Ц), и сонанте(М, В, Р, Л, Н, Љ, Њ, Ј).

   - Који сугласници су истовремено и звучни и предњонепчани?
   - Који безвучни сугласници нису задњонепчани?
   - Који сугласници су сонанти или звучни?

Поправи наредни код тако да исправно решава овај задатак. Програм
након покретања треба да испише наредне резултате.
     
::      

  {'Ђ', 'Џ', 'Ж'}
  {'Ч', 'Ћ', 'Ш', 'Т', 'П', 'Ф', 'С', 'Ц'}
  {'Џ', 'З', 'Д', 'Ђ', 'Ј', 'Л', 'Н', 'М', 'Г', 'Р', 'Б', 'Љ', 'Њ', 'Ж', 'В'}

.. activecode:: скупови_сугласника
		
   zadnjonepcani  = {"К", "Г", "Х"}
   prednjonepcani = {"Ј", "Љ", "Њ", "Ћ", "Ђ", "Ш", "Ж", "Ч", "Џ"}
   zvucni   = {"Б", "Г", "Д", "Ђ", "Ж", "З", "Џ"}
   bezvucni = {"П", "К", "Т", "Ћ", "Ш", "С", "Ч", "Ф", "Х", "Ц"}
   sonanti  = {"М", "В", "Р", "Л", "Н", "Љ", "Њ", "Ј"}

   zvucni_prednjonepcani = {}           # popravi ovaj red
   bezvucni_ne_zadnjonepcani = {}       # popravi ovaj red
   zvucni_ili_sonanti = {}              # popravi ovaj red
   print(zvucni_prednjonepcani)
   print(bezvucni_ne_zadnjonepcani)
   print(zvucni_ili_sonanti)
   
Звучни и безвучни сугласници
''''''''''''''''''''''''''''
.. level:: 1
   
.. questionnote::

   Звучни и безвучни сугласници јављају се у паровима.  Звучни
   сугласници су БГДЂЖЗЏ (можеш их лакше запамтити помоћу првих слова
   реченице Баба грди деду: "Ђаволе живи зашто џандрљаш"?) Њихови
   безвучни парови су редом ПКТЋШСЧ. Напиши програм који за дати
   звучни сугласник одређује његов безвучни пар.

Поправи наредни програм тако што ћеш попунити речник одговарајућим
паровима сугласника. Ако све урадиш како треба, требало би да добијеш
7 зелених поља (сваки сугласник мора да прође тест). Користи велика
слова ћирилице.
   
.. activecode:: безвучни_звучни_парови
   :nocodelens:
      
   def bezvucni(zvucni):
       bezvucni_par = {}    # поправи овај ред
       return bezvucni_par[zvucni]
       
   ====
   from unittest.gui import TestCaseGui

   class myTests(TestCaseGui):

       def testOne(self):
          self.assertEqual(bezvucni("Б"), "П", "Безвучни пар гласа Б је глас П.")
          self.assertEqual(bezvucni("Г"), "К", "Безвучни пар гласа Г је глас К.")
          self.assertEqual(bezvucni("Д"), "Т", "Безвучни пар гласа Д је глас Т.")
          self.assertEqual(bezvucni("Ђ"), "Ћ", "Безвучни пар гласа Ђ је глас Ћ.")
          self.assertEqual(bezvucni("Ж"), "Ш", "Безвучни пар гласа Ж је глас Ш.")
          self.assertEqual(bezvucni("З"), "С", "Безвучни пар гласа З је глас С.")
          self.assertEqual(bezvucni("Џ"), "Ч", "Безвучни пар гласа Џ је глас Ч.")

   myTests().main()

Главни градови
''''''''''''''
.. level:: 1

.. questionnote::

   У речнику се чувају главни градови неколико држава. Напиши програм
   који учитава име државе и исписује главни град или каже да одговор
   на то питање не зна.

.. activecode:: главни_град

   glavni_grad = {"Srbija": "Beograd",
                  "Mađarska": "Budimpešta",
                  "Rumunija": "Bukurešt",
                  "Bugarska": "Sofija",
                  "Makedonija": "Skoplje",
                  "Albanija": "Tirana",
                  "Crna Gora": "Podgorica",
                  "Bosna i Hercegovina": "Sarajevo",
                  "Hrvatska": "Zagreb"}
   # završi ovaj program
   
